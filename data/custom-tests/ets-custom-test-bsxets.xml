<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDffb46d85-950f-4a48-9d80-a16db54f1632" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>Test three types prof</label>
  <description><![CDATA[three types Description]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>Joltseductress</author>
  <creationDate>2018-08-27T09:52:35.273Z</creationDate>
  <lastEditor>Joltseductress</lastEditor>
  <lastUpdateDate>2018-08-27T09:52:35.273Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EIDffb46d85-950f-4a48-9d80-a16db54f1632"/>
      <testCases>
        <TestCase id="EID3c4c4844-4522-4c99-ba82-9580ef9f679e">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type1' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EIDc3e81f8d-4c19-424c-b271-e985331c0936">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID3c4c4844-4522-4c99-ba82-9580ef9f679e"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID424ac0fe-a75d-4610-8d2f-ded70c7224f6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type1Int' and namespace 'www.threetypes.com' should have a value that corresponds to one from the following list: <br><ul><li>1</li><li>3</li><li>5</li></ul>]]></description>
                  <parent ref="EIDc3e81f8d-4c19-424c-b271-e985331c0936"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('1', '3', '5')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'type1Int', 'localName': 'type1', 'namespace': 'www.threetypes.com', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID1740ed2f-1fdc-4703-8f8f-a35e832870a1">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EID6dc5649b-8175-4ae8-be30-1ff3dc120df2">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID1740ed2f-1fdc-4703-8f8f-a35e832870a1"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9f78cc20-dae5-49da-a1c1-5b63903876e9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'type3' and namespace 'www.threetypes.com' should be present in the file]]></description>
                  <parent ref="EID6dc5649b-8175-4ae8-be30-1ff3dc120df2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'type3', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDb5717f0a-79dc-41f8-b6de-c67ff1a32139">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EIDb9603f0c-9b60-4d2d-a5a5-8820ff2b32af">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDb5717f0a-79dc-41f8-b6de-c67ff1a32139"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb35d1687-5ab9-4d7b-8bfe-e2aa1cb0198b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type3String' and namespace 'www.threetypes.com' should not be empty if it's present]]></description>
                  <parent ref="EIDb9603f0c-9b60-4d2d-a5a5-8820ff2b32af"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com']
     for $propertyFound in $propertiesFound 
     return
       if (functx:all-whitespace($propertyFound)) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID11fe5cae-0e7b-4037-accb-7944073c91e9">
          <label>type2 label</label>
          <description><![CDATA[type2 description]]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EID5e85d596-20ec-405c-9063-7d4514408194">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID11fe5cae-0e7b-4037-accb-7944073c91e9"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID597cd801-18e7-4a43-9144-84db83e54fb3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type2Double' and namespace 'www.threetypes.com' should have a minimum cardinality of 2 and a maximum cardinality of 4]]></description>
                  <parent ref="EID5e85d596-20ec-405c-9063-7d4514408194"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type2' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='type2Double' and namespace-uri()='www.threetypes.com']) 
       return
       if (($propertyCount lt 2) or ($propertyCount gt 4)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'type2', 'namespace': 'www.threetypes.com', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDdcaa13c7-6219-43e9-ba60-2229ee2fa794">
          <label>MyCondition</label>
          <description><![CDATA[MyDescription]]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EID141699fc-1a2b-42ab-92d5-4f14f079daf4">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDdcaa13c7-6219-43e9-ba60-2229ee2fa794"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0b5aa912-86fc-4ca9-bee9-6d9724e569a7">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: MyCondition
<br />Description: MyDescription
<br />Subconditions: 
<br />- IF type1.type1Int IS 'int'
<br /> THEN type1.type1String IS 'string'
<br />]]></description>
                  <parent ref="EID141699fc-1a2b-42ab-92d5-4f14f079daf4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com' and text()='int'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com' and text()='string'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com', 'expectedValue': 'string' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDbc268d2a-4ba2-4600-9f4d-5b49b1f7925f">
          <label>asdas</label>
          <description><![CDATA[asdas]]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EIDef1e4161-5439-49b0-9ea0-fe2879667e7c">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDbc268d2a-4ba2-4600-9f4d-5b49b1f7925f"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa9d463b2-0763-4974-87dd-8bc057a6fbf0">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: asdas
<br />Description: asdas
<br />Subconditions: 
<br />- IF type3.type3String EXISTS
<br /> THEN type3.type3Int EXISTS
<br />]]></description>
                  <parent ref="EIDef1e4161-5439-49b0-9ea0-fe2879667e7c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3Int' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type3Int', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDbc0371e8-4966-47da-a6d7-c65080e03110">
          <label>xor1</label>
          <description><![CDATA[xordesc]]></description>
          <parent ref="EIDb52a2da7-d1bb-4e71-993a-4153f6b4f547"/>
          <testSteps>
            <TestStep id="EIDedd88205-d4c3-4665-9698-469a1b4cbfaa">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDbc0371e8-4966-47da-a6d7-c65080e03110"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID59bc3e1b-e461-40c4-96ab-17223d1ae363">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: xor1
<br />Description: xordesc
<br />Operator: XOR
<br />Subconditions: 
<br />- IF type1.type1Int EXISTS
<br /> THEN type1.type1String EXISTS
<br />- IF type3.type3Int IS 'int'
<br /> THEN type3.type3String IS 'string'
<br />]]></description>
                  <parent ref="EIDedd88205-d4c3-4665-9698-469a1b4cbfaa"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3Int' and namespace-uri()='www.threetypes.com' and text()='int'])
     let $thenPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com' and text()='string'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com', 'expectedValue': 'string' })
     else ()
    )[position() le $limitErrors]
 let $totalNumberErrors := count(($messages0, $messages1))
 let $messages := 
  if($totalNumberErrors eq 1) then ()
  else if ($totalNumberErrors eq 0) then
    local:addMessage('TR.xorAllConditionsMatched', map { 'localName': 'notRelevant', 'namespace': 'notRelevant' })

  else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
