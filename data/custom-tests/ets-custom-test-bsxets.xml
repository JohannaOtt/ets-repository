<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID291f9c04-ccf8-400e-8165-b95770e7c978" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>Metadatenprofil GDI-BW Version 2.1 (Daten)</label>
  <description><![CDATA[Das vom Begleitausschuss GDI-BW am 26.05.2009 erstmals beschlossene (Version 1.0) und zuletzt am 09.12.2020 fortgeschriebene Metadatenprofil GDI-BW (Version 2.1) legt Struktur, Umfang und Inhalte der Metadaten zur Beschreibung der in der GDI-BW angebotenen Geodaten und Geodatendienste (Geoinformationsressourcen) fest. 
Das Metadatenprofil GDI-BW ist verbindlich für alle öffentlichen und privaten Stellen, die im Rahmen der GDI-BW ihre Geoinformationsressourcen für die fach- und stellenübergreifende Nutzung bereitstellen (GDI-Partner).]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>GDI-BW</author>
  <creationDate>2020-07-16T07:38:11.454Z</creationDate>
  <lastEditor>GDI-BW</lastEditor>
  <lastUpdateDate>2021-02-23T06:44:02.405Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EID98e8ada8-02fa-42a2-abb8-169f7a2be4ba">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EID291f9c04-ccf8-400e-8165-b95770e7c978"/>
      <testCases>
        <TestCase id="EID2dc34791-b31f-47dd-9854-9cd8025dc94d">
          <label>Komplexe Einschränkungen (Constraint Editor)</label>
          <description><![CDATA[Komplexe Einschränkungen (Constraint Editor)]]></description>
          <parent ref="EID98e8ada8-02fa-42a2-abb8-169f7a2be4ba"/>
          <testSteps>
            <TestStep id="EID445a483f-77b3-4e59-988d-cb92f6cbf2e5">
              <label>laufende Nummern 69 und 73</label>
              <description><![CDATA[nach INSPIRE-Metadaten-Verordnung muss entweder Nr. 69 "MD_Legal Constraints" oder Nr. 73 "MD_Security Constraints" belegt werden.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID97015416-0b1f-409e-86e4-fc23a0e3de99">
                  <label>laufende Nummern 69 und 73</label>
                  <description><![CDATA[nach INSPIRE-Metadaten-Verordnung muss entweder Nr. 69 "MD_Legal Constraints" oder Nr. 73 "MD_Security Constraints" belegt werden.]]></description>
                  <parent ref="EID445a483f-77b3-4e59-988d-cb92f6cbf2e5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0)) then ()
   else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcc6278bb-0fa3-4ea1-a359-05175b1d175a">
              <label>laufende Nummer 80</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis der INSPIRE-Konformität, sofern die Geodaten der INSPIRE-Richtlinie unterliegen]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDab6a7674-ff78-4e02-b9da-1df0212ee058">
                  <label>laufende Nummer 80</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis der INSPIRE-Konformität, sofern die Geodaten der INSPIRE-Richtlinie unterliegen]]></description>
                  <parent ref="EIDcc6278bb-0fa3-4ea1-a359-05175b1d175a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'report', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcd8c8934-5a5a-4d36-a082-df163c005f52">
              <label>laufende Nummer 7</label>
              <description><![CDATA[verpflichtend aus ISO 19115, wenn Hierarchiebene
nicht "Geodatensatz" ist]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa39d150e-752b-4466-ad36-47e5ec554594">
                  <label>laufende Nummer 7</label>
                  <description><![CDATA[verpflichtend aus ISO 19115, wenn Hierarchiebene
nicht "Geodatensatz" ist]]></description>
                  <parent ref="EIDcd8c8934-5a5a-4d36-a082-df163c005f52"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_ScopeCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='dataset'])
       let $thenPropertyCount := count($typeFound/*[local-name()='hierarchyLevelName' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount eq 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'hierarchyLevelName', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc1370897-1aef-4d55-8f41-5746589c2f4c">
              <label>laufende Nummer 365</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, wenn Klasse unter Nr. 24 "Bibliographische Angaben" verwendet wird; 
Empfehlung:  
ist der Geodatensatz an einen Dienst gekoppelt, so soll hier der Identifikator angegeben werden, auf den sich der Dienst bezieht 

 (vgl. Nr. 2.2.5 der Guidelines zur Verordnung)]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe9018a9c-c499-4669-abc1-6f6c63290652">
                  <label>laufende Nummer 365</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, wenn Klasse unter Nr. 24 "Bibliographische Angaben" verwendet wird; 
Empfehlung:  
ist der Geodatensatz an einen Dienst gekoppelt, so soll hier der Identifikator angegeben werden, auf den sich der Dienst bezieht 

 (vgl. Nr. 2.2.5 der Guidelines zur Verordnung)]]></description>
                  <parent ref="EIDc1370897-1aef-4d55-8f41-5746589c2f4c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='identifier' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'identifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0c94f808-feac-4bdb-94c2-4c0c63dcb0a4">
              <label>laufende Nummern 60 und 61</label>
              <description><![CDATA[verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 61 "Distanz" geschieht
verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 60 "Vergleichsmaßstab" geschieht]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0f6a7bcc-ba65-4a84-ad1a-d4c91123cde6">
                  <label>laufende Nummern 60 und 61</label>
                  <description><![CDATA[verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 61 "Distanz" geschieht
verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 60 "Vergleichsmaßstab" geschieht]]></description>
                  <parent ref="EID0c94f808-feac-4bdb-94c2-4c0c63dcb0a4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Resolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='equivalentScale' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'equivalentScale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Resolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distance' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'distance', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0)) then ()
   else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcaa954ef-d6c6-4e5d-9052-ff769cbec7e3">
              <label>laufende Nummern 70 und 72 und 74</label>
              <description><![CDATA[Nach INSPIRE-Metadaten-Verordnung ist mindestens ein Element der Nrn. 70, 72 oder 74 anzugeben (vgl. Nr. 2.9 der Guidelines zur Verordnung).]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDda3c4640-6ef7-4d96-8af1-23b3fc61fdfe">
                  <label>laufende Nummern 70 und 72 und 74</label>
                  <description><![CDATA[Nach INSPIRE-Metadaten-Verordnung ist mindestens ein Element der Nrn. 70, 72 oder 74 anzugeben (vgl. Nr. 2.9 der Guidelines zur Verordnung).]]></description>
                  <parent ref="EIDcaa954ef-d6c6-4e5d-9052-ff769cbec7e3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'accessConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='classification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'classification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0)) then ()
   else ($messages0, $messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID15414916-3a78-445f-b2de-68380a6e361a">
              <label>laufende Nummer 70</label>
              <description><![CDATA[Wird Nr. 72 belegt, so ist in Nr. 70 mindestens der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" anzugeben.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDada46fd5-4089-44c4-aa7d-c8aaeff0b1d2">
                  <label>laufende Nummer 70</label>
                  <description><![CDATA[Wird Nr. 72 belegt, so ist in Nr. 70 mindestens der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" anzugeben.]]></description>
                  <parent ref="EID15414916-3a78-445f-b2de-68380a6e361a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'codeListValue', 'namespace': '', 'fileIdentifier': $rid, 'filename': local:filename($record), 'expectedValue': 'otherRestrictions' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID88216409-d026-415e-8ea4-d8dd53913f0c">
              <label>laufende Nummer 72</label>
              <description><![CDATA[Nr. 72 ist verpflichtend zu belegen, wenn in Nr. 70 der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" angegeben wird.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID90379301-6a02-4878-9a0b-e71162afcfcc">
                  <label>laufende Nummer 72</label>
                  <description><![CDATA[Nr. 72 ist verpflichtend zu belegen, wenn in Nr. 70 der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" angegeben wird.]]></description>
                  <parent ref="EID88216409-d026-415e-8ea4-d8dd53913f0c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa59f2b5b-08bb-4fc5-a667-704ec00f8f27">
              <label>laufende Nummer 129</label>
              <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5bf22f60-ea02-41e1-bd9e-f9c349dc6511">
                  <label>laufende Nummer 129</label>
                  <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
                  <parent ref="EIDa59f2b5b-08bb-4fc5-a667-704ec00f8f27"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='Date' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='2010-12-08'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'Date', 'namespace': 'http://www.isotc211.org/2005/gco', 'fileIdentifier': $rid, 'filename': local:filename($record), 'expectedValue': '2010-12-08' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0cea5d35-9d1b-47f4-9c23-c6726180e21d">
              <label>laufende Nummer 397</label>
              <description><![CDATA[nach INSPIRE-Metadaten-Verordnung verpflichtend, vgl. Nr. 277

Folgende Ressourcen können hinterlegt werden:
- ein GetCapabilities-Dokument eines Dienstes
- eine WSDL-Datei (SOAP-Binding)
- eine Webseite, die weitere Anleitungen enthält
- eine Client-Anwendung, die einen direkten Zugang zum Dienst gewährt
Handelt es sich bei der Ressource um einen Atom-Download-Dienst, so ist hier die URL des Service Feed einzutragen.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDad97aa1a-5996-4f8f-a4a3-30169baf1099">
                  <label>laufende Nummer 397</label>
                  <description><![CDATA[nach INSPIRE-Metadaten-Verordnung verpflichtend, vgl. Nr. 277

Folgende Ressourcen können hinterlegt werden:
- ein GetCapabilities-Dokument eines Dienstes
- eine WSDL-Datei (SOAP-Binding)
- eine Webseite, die weitere Anleitungen enthält
- eine Client-Anwendung, die einen direkten Zugang zum Dienst gewährt
Handelt es sich bei der Ressource um einen Atom-Download-Dienst, so ist hier die URL des Service Feed einzutragen.]]></description>
                  <parent ref="EID0cea5d35-9d1b-47f4-9c23-c6726180e21d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_DigitalTransferOptions' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='onLine' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='onLine' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_OnlineResource' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='linkage' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'linkage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa2ff8ddb-f261-49ab-85df-3a238a187069">
              <label>laufende Nummer 49</label>
              <description><![CDATA[Empfehlung: Angabe eines URI.
Wenn Element 31 befüllt dann muss auch Element 49 befüllt sein.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcf517f57-4165-4c72-8586-3a3b45c9e08d">
                  <label>laufende Nummer 49</label>
                  <description><![CDATA[Empfehlung: Angabe eines URI.
Wenn Element 31 befüllt dann muss auch Element 49 befüllt sein.]]></description>
                  <parent ref="EIDa2ff8ddb-f261-49ab-85df-3a238a187069"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='graphicOverview' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='graphicOverview' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_BrowseGraphic' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='fileName' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'fileName', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb80a9d91-7713-4161-8110-39e5d0b91c8a">
              <label>Beschränkungen des öffentlichen Zugangs INS VO MD B 8-2</label>
              <description><![CDATA[Dieser Abschnitt beschreibt, wie Zugriffseinschränkungen im Sinne des INSPIRE-Elements "Beschränkungen des öffentlichen Zugangs" entsprechend der [INS TG MD] zu erfassen sind. Dabei sind Beschränkungen des öffentlichen Zugangs nur in den in Artikel 13(1) a) - h) der INSPIRE-Richtlinie genannten Fällen zulässig.

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID95c56439-9274-4875-acc0-149cf5e40fdc">
                  <label>Beschränkungen des öffentlichen Zugangs INS VO MD B 8-2</label>
                  <description><![CDATA[Dieser Abschnitt beschreibt, wie Zugriffseinschränkungen im Sinne des INSPIRE-Elements "Beschränkungen des öffentlichen Zugangs" entsprechend der [INS TG MD] zu erfassen sind. Dabei sind Beschränkungen des öffentlichen Zugangs nur in den in Artikel 13(1) a) - h) der INSPIRE-Richtlinie genannten Fällen zulässig.

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
                  <parent ref="EIDb80a9d91-7713-4161-8110-39e5d0b91c8a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'codeListValue', 'namespace': '', 'fileIdentifier': $rid, 'filename': local:filename($record), 'expectedValue': 'otherRestrictions' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc45f5207-439b-4a49-9c1c-ad105692e6fd">
              <label>Nutzungs- und Zugriffsbedingungen in der GDI-DE - ohne INSPIRE</label>
              <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungs- und Zugriffsbedingungen in den Metadaten der GDI-DE dokumentiert werden, sofern es sich um eine Ressource handelt, die nicht unter die INSPIRE-Richtlinie fällt. Sonst wären stattdessen die Regelungen für das INSPIRE-Element "Bedingungen für den Zugang und die Nutzung" unter 2.9.2 (Konventionen zu Metadaten, Version 2.0) anzuhalten.

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe5f0af7e-fd14-47e2-8dc8-e34172f4c718">
                  <label>Nutzungs- und Zugriffsbedingungen in der GDI-DE - ohne INSPIRE</label>
                  <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungs- und Zugriffsbedingungen in den Metadaten der GDI-DE dokumentiert werden, sofern es sich um eine Ressource handelt, die nicht unter die INSPIRE-Richtlinie fällt. Sonst wären stattdessen die Regelungen für das INSPIRE-Element "Bedingungen für den Zugang und die Nutzung" unter 2.9.2 (Konventionen zu Metadaten, Version 2.0) anzuhalten.

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
                  <parent ref="EIDc45f5207-439b-4a49-9c1c-ad105692e6fd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd']/data(@codeListValue))
         return 
       if ($ifPropertyCount eq 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'codeListValue', 'namespace': '', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDda2a737d-281c-44c3-bfda-8261f4dc9aa4">
              <label>Bedingungen für den Zugang und die Nutzung bei INSPIRE INS VO MD B 8-1</label>
              <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungs- und Zugriffsbedingungen im Sinne des INSPIRE-Elements "Bedingungen für den Zugang und die Nutzung" entsprechend der [INS TG MD] zu erfassen sind. 

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5921dc6f-a1c9-40e7-8662-d4f3cc5bae3e">
                  <label>Bedingungen für den Zugang und die Nutzung bei INSPIRE INS VO MD B 8-1</label>
                  <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungs- und Zugriffsbedingungen im Sinne des INSPIRE-Elements "Bedingungen für den Zugang und die Nutzung" entsprechend der [INS TG MD] zu erfassen sind. 

Die Prüfung bezüglich der Ausweisung mittels gmx:Anchor Element ist hier nicht berücksichtigt.]]></description>
                  <parent ref="EIDda2a737d-281c-44c3-bfda-8261f4dc9aa4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'codeListValue', 'namespace': '', 'fileIdentifier': $rid, 'filename': local:filename($record), 'expectedValue': 'otherRestrictions' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd1e1316a-cce4-43ea-a92c-1699da5c10b1">
              <label>Nutzungsbedingungen und Lizenzinformationen für Open Data</label>
              <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungsbedingungen bzw. Lizenzinformationen zu Open Data in den Metadaten der GDI-DE dokumentiert werden, um zentral bzw. einheitlich dem GovData-Portal bereitgestellt und dort verarbeitet werden zu können.

Die Prüfung bezüglich der semantischen Ausgestaltung der JSON-Notation ist hier nicht berücksichtigt.]]></description>
              <parent ref="EID2dc34791-b31f-47dd-9854-9cd8025dc94d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe55a5688-7178-4177-85d2-20c0a3b1489a">
                  <label>Nutzungsbedingungen und Lizenzinformationen für Open Data</label>
                  <description><![CDATA[Dieser Abschnitt beschreibt, wie Nutzungsbedingungen bzw. Lizenzinformationen zu Open Data in den Metadaten der GDI-DE dokumentiert werden, um zentral bzw. einheitlich dem GovData-Portal bereitgestellt und dort verarbeitet werden zu können.

Die Prüfung bezüglich der semantischen Ausgestaltung der JSON-Notation ist hier nicht berücksichtigt.]]></description>
                  <parent ref="EIDd1e1316a-cce4-43ea-a92c-1699da5c10b1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='opendata'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'codeListValue', 'namespace': '', 'fileIdentifier': $rid, 'filename': local:filename($record), 'expectedValue': 'otherRestrictions' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       for $typeFound in $typesFound 
         let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='opendata'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco'])
         return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'fileIdentifier': $rid, 'filename': local:filename($record) })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01">
          <label>Einschränkungen bei Objektarten</label>
          <description><![CDATA[Einschränkungen bei Objektarten]]></description>
          <parent ref="EID98e8ada8-02fa-42a2-abb8-169f7a2be4ba"/>
          <testSteps>
            <TestStep id="EID3dcad25d-040b-411c-9423-78e9b745333c">
              <label>ISO lfd.Nr.103: DQ_TopologicalConsistency.evaluationMethodType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement evaluationMethodType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf4a13635-bf9d-435c-beea-8d6a0a57f3c5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID3dcad25d-040b-411c-9423-78e9b745333c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'DQ_NonQuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/text(), 'propName': 'evaluationMethodType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID01b3a0c3-5a4b-4808-80de-a8102b90667a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID29e1f577-ef88-4c67-ac37-9d51f7667d00">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'classification' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>restricted</li><li>unclassified</li><li>confidential</li><li>secret</li><li>topSecret</li></ul>]]></description>
                  <parent ref="EID01b3a0c3-5a4b-4808-80de-a8102b90667a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('restricted', 'unclassified', 'confidential', 'secret', 'topSecret')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='classification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'classification', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDadcd0615-8a03-4789-9edd-5a867cbd9754">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDeb435874-6a39-4e55-a06a-1ce8703b1988">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0]]></description>
                  <parent ref="EIDadcd0615-8a03-4789-9edd-5a867cbd9754"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe307a062-0300-4136-a567-13dfea291c63">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_OnlineResource' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID977f8da4-7954-4363-adce-f27b2e5cd4a3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'function' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>download</li><li>information</li><li>offlineAccess</li><li>order</li><li>search</li></ul>]]></description>
                  <parent ref="EIDe307a062-0300-4136-a567-13dfea291c63"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('download', 'information', 'offlineAccess', 'order', 'search')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_OnlineResource' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='function' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'CI_OnlineResource', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'function', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID45bf1bc7-31c8-44c6-a7e7-145a17700a49">
              <label>Prüfung, ob Datensätze und –serien im Sinne offener Verwaltungsdaten über Dienste bzw. Direktdownload adressierbar.</label>
              <description><![CDATA[Es muss mindestens ein frei zugänglicher Dienst zwecks Zugriff auf die dokumentierten Daten existieren und unter Berücksichtigung der Vorgaben zur Daten-Dienste-Kopplung  mit Dienst-Metadaten beschrieben sein und/oder in den Metadaten zum Datenbestand selbst ein Link  zum unmittelbaren Download der dokumentierten Daten angegeben sein.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9030c08c-0cb9-4683-b1c7-742a54e051f1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'linkage' and namespace 'http://www.isotc211.org/2005/gmd' should be evaluated manually for correctness.]]></description>
                  <parent ref="EID45bf1bc7-31c8-44c6-a7e7-145a17700a49"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>NOT_APPLICABLE</expression>
                  <testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1d84c0f1-806d-4efa-bed7-f63e6cd4edc4">
              <label>ISO lfd.Nr.143: MD_MaintenanceInformation.maintenanceAndUpdateFrequency</label>
              <description><![CDATA[Prüfung, ob Metadatenelement maintenanceAndUpdateFrequency vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd30e08c7-8dc0-442b-8444-86ab76740a31">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'maintenanceAndUpdateFrequency' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>irregular</li><li>continual</li><li>daily</li><li>biannually</li><li>monthly</li><li>quarterly</li><li>asNeeded</li><li>notPlanned</li><li>weekly</li><li>fortnightly</li><li>annually</li><li>unknown</li></ul>]]></description>
                  <parent ref="EID1d84c0f1-806d-4efa-bed7-f63e6cd4edc4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('irregular', 'continual', 'daily', 'biannually', 'monthly', 'quarterly', 'asNeeded', 'notPlanned', 'weekly', 'fortnightly', 'annually', 'unknown')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_MaintenanceInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='maintenanceAndUpdateFrequency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_MaintenanceInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'maintenanceAndUpdateFrequency', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDce355d2a-94f6-49b2-9b13-d50868b25d12">
              <label>ISO lfd.Nr.146: MD_MaintenanceInformation.updateScope</label>
              <description><![CDATA[Prüfung, ob Metadatenelement updateScope inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4a0acd14-99a3-4059-9921-d1a0942ce506">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'updateScope' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>attributeType</li><li>model</li><li>collectionHardware</li><li>collectionSession</li><li>feature</li><li>featureType</li><li>dimensionGroup</li><li>nonGeographicDataset</li><li>propertyType</li><li>dataset</li><li>series</li><li>attribute</li><li>software</li><li>service</li><li>tile</li><li>fieldSession</li></ul>]]></description>
                  <parent ref="EIDce355d2a-94f6-49b2-9b13-d50868b25d12"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('attributeType', 'model', 'collectionHardware', 'collectionSession', 'feature', 'featureType', 'dimensionGroup', 'nonGeographicDataset', 'propertyType', 'dataset', 'series', 'attribute', 'software', 'service', 'tile', 'fieldSession')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_MaintenanceInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='updateScope' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_MaintenanceInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'updateScope', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID51518996-e4bf-49d8-96f7-c31756597274">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID306ce9b1-6f9b-449d-8442-4994366c2729">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'spatialRepresentationType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>tin</li><li>stereoModel</li><li>video</li><li>vector</li><li>textTable</li><li>grid</li></ul>]]></description>
                  <parent ref="EID51518996-e4bf-49d8-96f7-c31756597274"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('tin', 'stereoModel', 'video', 'vector', 'textTable', 'grid')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='spatialRepresentationType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'spatialRepresentationType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbf7313a4-bca4-4e05-8a82-2d7a3f6d7296">
              <label>ISO lfd.Nr.4: MD_Metadata.characterSet</label>
              <description><![CDATA[Prüfung, ob Metadatenelement characterSet vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf09b2217-387c-4392-95ee-6f223acf155a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>utf8</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EIDbf7313a4-bca4-4e05-8a82-2d7a3f6d7296"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'utf8', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'characterSet', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb4f4b724-0532-4eda-8424-cb6ed2806cf0">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID010b947a-9dc2-412b-822f-f1b52ee1dff8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDb4f4b724-0532-4eda-8424-cb6ed2806cf0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDab071d71-ca65-4d36-94f2-3d3bb8e7540b">
              <label>ISO lfd.Nr.29: MD_DataIdentification.pointOfContact</label>
              <description><![CDATA[Prüfung, ob Metadatenelement pointOfContact vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4de68aca-f703-48d0-b591-4b6cec511923">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'pointOfContact' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDab071d71-ca65-4d36-94f2-3d3bb8e7540b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='pointOfContact' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa863807d-450f-4aaf-b971-d2a8c06b70d8">
              <label>ISO lfd.Nr.29: MD_DataIdentification.pointOfContact</label>
              <description><![CDATA[Prüfung, ob Metadatenelement pointOfContact vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID84e4a699-d858-49be-92e0-1200c95e6257">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'pointOfContact' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDa863807d-450f-4aaf-b971-d2a8c06b70d8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pointOfContact' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'pointOfContact', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID67c8f49d-00db-4111-beb7-cca875f38e13">
              <label>ISO lfd.Nr.33: MD_DataIdentification.descriptiveKeywords</label>
              <description><![CDATA[Prüfung, ob Metadatenelement descriptiveKeywords vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfd36fa81-1493-4a53-b8da-50437a7ad982">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptiveKeywords' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID67c8f49d-00db-4111-beb7-cca875f38e13"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID36bc97ff-0a5e-4dd6-b374-216ac5aafc33">
              <label>ISO lfd.Nr.33: MD_DataIdentification.descriptiveKeywords</label>
              <description><![CDATA[Prüfung, ob Metadatenelement descriptiveKeywords vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdd3a6850-cbf7-42af-b91f-6a116c1ab0a5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptiveKeywords' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID36bc97ff-0a5e-4dd6-b374-216ac5aafc33"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'descriptiveKeywords', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID05760793-83d3-4625-b730-a12004d04b67">
              <label>ISO lfd.Nr.35: MD_DataIdentification.resourceConstraints</label>
              <description><![CDATA[Prüfung, ob Metadatenelement resourceConstraints vorhanden.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6e3837cc-cb9f-431f-a9cc-9b27d02eb38e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'resourceConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID05760793-83d3-4625-b730-a12004d04b67"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8d9373df-08ce-41b2-a1b2-40c8a40a25fd">
              <label>ISO lfd.Nr.41: MD_DataIdentification.topicCategory</label>
              <description><![CDATA[Prüfung, ob Metadatenelement topicCategory vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe99129da-e9bb-4aa0-869d-f9d61fecacec">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topicCategory' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID8d9373df-08ce-41b2-a1b2-40c8a40a25fd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='topicCategory' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf70958d8-bf3d-426b-92d6-76eca50972a7">
              <label>ISO lfd.Nr.41: MD_DataIdentification.topicCategory</label>
              <description><![CDATA[Prüfung, ob Metadatenelement topicCategory vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2fbbdcf0-90c8-4917-b8cd-12da95acb31d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topicCategory' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDf70958d8-bf3d-426b-92d6-76eca50972a7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='topicCategory' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'topicCategory', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf71636a9-5524-4124-8423-470c4e3da973">
              <label>ISO lfd.Nr.45: MD_DataIdentification.extent</label>
              <description><![CDATA[Prüfung, ob Metadatenelement extent vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe59255db-3629-4fb4-a106-7ed7f1c2b355">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extent' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDf71636a9-5524-4124-8423-470c4e3da973"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd6fe2ee5-e49e-410c-a038-0d9f67b72eb5">
              <label>ISO lfd.Nr.45: MD_DataIdentification.extent</label>
              <description><![CDATA[Prüfung, ob Metadatenelement extent vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdd5ab2b3-0497-4fd8-9683-387234e9ad8f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extent' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDd6fe2ee5-e49e-410c-a038-0d9f67b72eb5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'extent', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd8c5520c-6bec-4e4b-87b4-f7f39e28deb1">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0254d04a-1c48-41af-b02b-577492013ddf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDd8c5520c-6bec-4e4b-87b4-f7f39e28deb1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'LI_Lineage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID73a46a07-6489-4302-bf98-3c32f3bc2e59">
              <label>ISO lfd.Nr.83: LI_Lineage.statement</label>
              <description><![CDATA[Prüfung, ob Metadatenelement statement vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb5fd174e-cf83-4c29-8ab7-af154d8e0f20">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'statement' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID73a46a07-6489-4302-bf98-3c32f3bc2e59"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='statement' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Lineage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd8dcf207-6e5c-464c-af05-5af570712890">
              <label>ISO lfd.Nr.83: LI_Lineage.statement</label>
              <description><![CDATA[Prüfung, ob Metadatenelement statement vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf3c63f7e-51b6-4cb7-8522-65e011859bd2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'statement' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDd8dcf207-6e5c-464c-af05-5af570712890"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='statement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'statement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5dd5c207-c799-4c0b-a988-c0e862edda3e">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbea06277-77a7-4f98-bf24-8e4c83605b3f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID5dd5c207-c799-4c0b-a988-c0e862edda3e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'DQ_DataQuality', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID023d26ee-a15a-424c-a12e-4a87f9138fa9">
              <label>ISO lfd.Nr.81: DQ_DataQuality.lineage</label>
              <description><![CDATA[Prüfung, ob Metadatenelement lineage vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID87af37b2-4613-44f9-a70e-8377561cae62">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'lineage' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID023d26ee-a15a-424c-a12e-4a87f9138fa9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_DataQuality', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb5ccdc09-dc27-4b9a-ac7f-105f4b4c0ac7">
              <label>ISO lfd.Nr.81: DQ_DataQuality.lineage</label>
              <description><![CDATA[Prüfung, ob Metadatenelement lineage vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa1a0e4e9-cb36-4549-982f-7211c0c2d54c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'lineage' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDb5ccdc09-dc27-4b9a-ac7f-105f4b4c0ac7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'lineage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd4e2408b-4051-431d-9178-82841d051680">
              <label>ISO lfd.Nr.379: CI_ResponsibleParty.role</label>
              <description><![CDATA[Prüfung, ob Metadatenelement role vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7f68b4d1-a993-439b-848d-a9c6ecf2978b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'role' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>custodian</li><li>processor</li><li>publisher</li><li>originator</li><li>pointOfContact</li><li>user</li><li>distributor</li><li>resourceProvider</li><li>owner</li><li>principalInvestigator</li><li>author</li></ul>]]></description>
                  <parent ref="EIDd4e2408b-4051-431d-9178-82841d051680"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('custodian', 'processor', 'publisher', 'originator', 'pointOfContact', 'user', 'distributor', 'resourceProvider', 'owner', 'principalInvestigator', 'author')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='role' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'role', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6a286bb2-0884-4ef8-8860-e269d6694bc5">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2fe1d479-b0f1-4c18-9b75-c084910666e3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID6a286bb2-0884-4ef8-8860-e269d6694bc5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe04b9492-2464-4369-a62a-a81f4c46bfec">
              <label>ISO lfd.Nr.376: CI_ResponsibleParty.organisationName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement organisationName vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe596eb8c-c6f3-4fbb-994d-24ab7784d080">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'organisationName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDe04b9492-2464-4369-a62a-a81f4c46bfec"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='organisationName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0ffd231a-b1cf-423f-8635-a43cf9c20039">
              <label>ISO lfd.Nr.376: CI_ResponsibleParty.organisationName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement organisationName vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDedbfaff4-5498-4121-921d-6b305235bc72">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'organisationName' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID0ffd231a-b1cf-423f-8635-a43cf9c20039"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='organisationName' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'organisationName', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa769f32d-a4fd-49b8-8b98-ef74065fbc2a">
              <label>ISO lfd.Nr.378: CI_ResponsibleParty.contactInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement contactInfo vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf8205ba0-4896-4b42-8f30-2d0b7b183cbc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contactInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDa769f32d-a4fd-49b8-8b98-ef74065fbc2a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='contactInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID04b29128-7892-4a2b-8e9b-acc3ebe856ea">
              <label>ISO lfd.Nr.378: CI_ResponsibleParty.contactInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement contactInfo vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf671687a-b9e8-4d8c-9000-b0cd4143c751">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contactInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID04b29128-7892-4a2b-8e9b-acc3ebe856ea"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='contactInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'contactInfo', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID64a81191-5daf-4e80-b05a-1f6a7600269f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_PlatformSpecificServiceSpecification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9cf41531-334d-419a-9402-914320e05f73">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'DCP' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EID64a81191-5daf-4e80-b05a-1f6a7600269f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='SV_PlatformSpecificServiceSpecification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='DCP' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'SV_PlatformSpecificServiceSpecification', 'namespace': 'http://www.isotc211.org/2005/srv', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'DCP', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID984769e1-a70e-4fc4-b540-9d1a87b0949f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_PortSpecification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd27b6e10-6503-403f-a9df-d2caecc0005e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'binding' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EID984769e1-a70e-4fc4-b540-9d1a87b0949f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='SV_PortSpecification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='binding' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'SV_PortSpecification', 'namespace': 'http://www.isotc211.org/2005/srv', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'binding', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID23f9a883-91e9-42db-8edb-715ec149a274">
              <label>ISO lfd.Nr.180: MD_Dimension.dimensionName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement dimensionName vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1e8ed375-b6c6-4ac1-8643-27761e4a96fc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dimensionName' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>column</li><li>crossTrack</li><li>vertical</li><li>line</li><li>sample</li><li>track</li><li>row</li><li>time</li></ul>]]></description>
                  <parent ref="EID23f9a883-91e9-42db-8edb-715ec149a274"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('column', 'crossTrack', 'vertical', 'line', 'sample', 'track', 'row', 'time')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Dimension' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dimensionName' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Dimension', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'dimensionName', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2bcda831-ceb6-4d79-824d-8006aa9e29c9">
              <label>ISO lfd.Nr.103: DQ_TopologicalConsistency.evaluationMethodType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement evaluationMethodType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7455541a-dbf3-4240-9b93-5ad5d09dadd4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>directInternal</li><li>directExternal</li><li>indirect</li></ul>]]></description>
                  <parent ref="EID2bcda831-ceb6-4d79-824d-8006aa9e29c9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('directInternal', 'directExternal', 'indirect')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='AbstractDQ_Element' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'AbstractDQ_Element', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'evaluationMethodType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd6ac98da-7358-400e-80de-41b87c9616fe">
              <label>ISO lfd.Nr.101: DQ_Element.measureIdentification</label>
              <description><![CDATA[Prüfung, ob Metadatenelement measureIdentification vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID39f2991d-cd8b-48df-bf69-62beb677611d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureIdentification' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDd6ac98da-7358-400e-80de-41b87c9616fe"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='AbstractDQ_Element' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'AbstractDQ_Element', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDca071768-1475-4687-ae4b-c25164f29f15">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6365823e-c9c5-4586-9f0a-0115894f8f44">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>stratum</li><li>theme</li><li>discipline</li><li>place</li><li>temporal</li></ul>]]></description>
                  <parent ref="EIDca071768-1475-4687-ae4b-c25164f29f15"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('stratum', 'theme', 'discipline', 'place', 'temporal')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Keywords', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'type', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID45407e86-1e7d-46a8-b0af-e32a41816d8f">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf591895f-a543-4393-8c82-0251c44012c7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID45407e86-1e7d-46a8-b0af-e32a41816d8f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Keywords', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6076d1a4-271e-4d24-bde9-4e2c198be188">
              <label>ISO lfd.Nr.70: MD_LegalConstraints.accessConstraints</label>
              <description><![CDATA[Prüfung, ob Metadatenelement accessConstraints inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7504ac02-be4d-4953-9414-96be09ef7a36">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'accessConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>restricted</li><li>copyright</li><li>trademark</li><li>patentPending</li><li>intellectualPropertyRights</li><li>patent</li><li>license</li><li>otherRestrictions</li></ul>]]></description>
                  <parent ref="EID6076d1a4-271e-4d24-bde9-4e2c198be188"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('restricted', 'copyright', 'trademark', 'patentPending', 'intellectualPropertyRights', 'patent', 'license', 'otherRestrictions')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'accessConstraints', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8791c7c9-86f4-4196-90a4-c6fb1a49e59d">
              <label>ISO lfd.Nr.71: MD_LegalConstraints.useConstraints</label>
              <description><![CDATA[Prüfung, ob Metadatenelement useConstraints vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID670d87c1-308e-48ee-a6f2-6cd3e40dde94">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>restricted</li><li>copyright</li><li>trademark</li><li>patentPending</li><li>intellectualPropertyRights</li><li>patent</li><li>license</li><li>otherRestrictions</li></ul>]]></description>
                  <parent ref="EID8791c7c9-86f4-4196-90a4-c6fb1a49e59d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('restricted', 'copyright', 'trademark', 'patentPending', 'intellectualPropertyRights', 'patent', 'license', 'otherRestrictions')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'useConstraints', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0ef1f0b0-c876-4974-a590-27db638c1d4d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_LegalConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID55142ffe-ed2c-451d-b695-6d2c13262f87">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0]]></description>
                  <parent ref="EID0ef1f0b0-c876-4974-a590-27db638c1d4d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcc5b2f08-5d03-4887-8be9-209a93328aac">
              <label>ISO lfd.Nr.70: MD_LegalConstraints.accessConstraints</label>
              <description><![CDATA[Prüfung, ob Metadatenelement accessConstraints inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID20ea608b-5de8-4fce-9f62-10c2b9dd4ae4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'accessConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDcc5b2f08-5d03-4887-8be9-209a93328aac"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc4ed2986-cd27-42af-82e7-123d45b3b2c3">
              <label>ISO lfd.Nr.71: MD_LegalConstraints.useConstraints</label>
              <description><![CDATA[Prüfung, ob Metadatenelement useConstraints vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdc9b9003-0a37-4ac1-948f-290e6ea56fac">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDc4ed2986-cd27-42af-82e7-123d45b3b2c3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf1a81913-6e60-45c2-9e9f-d55b5dd0d3e5">
              <label>ISO lfd.Nr.241: MD_ImageDescription.contentType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement contentType vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdcce62b0-c44c-47e5-872c-30889db15ac4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contentType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>thematicClassification</li><li>image</li><li>physicalMeasurement</li></ul>]]></description>
                  <parent ref="EIDf1a81913-6e60-45c2-9e9f-d55b5dd0d3e5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('thematicClassification', 'image', 'physicalMeasurement')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_CoverageDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='contentType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_CoverageDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'contentType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7e46e11d-e374-4f35-8699-602276c4bf67">
              <label>ISO lfd.Nr.246: MD_ImageDescription.imagingCondition</label>
              <description><![CDATA[Prüfung, ob Metadatenelement imagingCondition inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID533e419e-eaea-49ac-8ec3-aef6e028021c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'imagingCondition' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>terrainMasking</li><li>heavySmokeOrDust</li><li>rain</li><li>snow</li><li>blurredImage</li><li>semiDarkness</li><li>night</li><li>shadow</li><li>cloud</li><li>degradingObliquity</li><li>fog</li></ul>]]></description>
                  <parent ref="EID7e46e11d-e374-4f35-8699-602276c4bf67"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('terrainMasking', 'heavySmokeOrDust', 'rain', 'snow', 'blurredImage', 'semiDarkness', 'night', 'shadow', 'cloud', 'degradingObliquity', 'fog')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_ImageDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='imagingCondition' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_ImageDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'imagingCondition', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID00d66398-8b56-4f9c-80dc-828d05901ef1">
              <label>ISO lfd.Nr.4: MD_Metadata.characterSet</label>
              <description><![CDATA[Prüfung, ob Metadatenelement characterSet vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID788b0533-7038-470e-afb4-cf300157bf49">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>utf8</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EID00d66398-8b56-4f9c-80dc-828d05901ef1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'utf8', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'characterSet', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6cbe6ee5-a82c-42e2-8bd3-95692fe1321a">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID350ef45c-ef5a-4793-854c-b7a08b5b24a1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID6cbe6ee5-a82c-42e2-8bd3-95692fe1321a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd4e1d39e-9bc0-436e-b959-8d83d02fcc10">
              <label>ISO lfd.Nr.2: MD_Metadata.fileIdentifier</label>
              <description><![CDATA[Prüfung, ob Metadatenelement fileIdentifier vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf00bca5b-0572-4bbd-8f4c-7fece5dce0c1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDd4e1d39e-9bc0-436e-b959-8d83d02fcc10"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbc42cd6d-a173-49f2-97ae-4cae7d3d8250">
              <label>ISO lfd.Nr.2: MD_Metadata.fileIdentifier</label>
              <description><![CDATA[Prüfung, ob Metadatenelement fileIdentifier vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb29b4587-a18b-496a-bba6-c871dd6a215c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDbc42cd6d-a173-49f2-97ae-4cae7d3d8250"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'fileIdentifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID95f65403-af88-405b-a61f-86db3a5029ae">
              <label>ISO lfd.Nr.3: MD_Metadata.language</label>
              <description><![CDATA[Prüfung, ob Metadatenelement language vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID97ea1679-a438-4f81-a4c2-43c162f71a79">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID95f65403-af88-405b-a61f-86db3a5029ae"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2822b02c-1331-4680-a3ef-c259c4ebfd8b">
              <label>ISO lfd.Nr.3: MD_Metadata.language</label>
              <description><![CDATA[Prüfung, ob Metadatenelement language vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9762be6d-6c8a-4b72-bc2e-9ba3c62a1122">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID2822b02c-1331-4680-a3ef-c259c4ebfd8b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'language', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID80ef7d50-1c6d-4c5d-af2a-f971a2952520">
              <label>ISO lfd.Nr.4: MD_Metadata.characterSet</label>
              <description><![CDATA[Prüfung, ob Metadatenelement characterSet vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID550489be-5a3b-4641-a77c-25db0238fe89">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID80ef7d50-1c6d-4c5d-af2a-f971a2952520"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb54cc082-2dce-417e-bf37-cf73d34c8142">
              <label>ISO lfd.Nr.4: MD_Metadata.characterSet</label>
              <description><![CDATA[Prüfung, ob Metadatenelement characterSet vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc80b2e76-2f4f-4a34-8914-e83c665c7ad9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDb54cc082-2dce-417e-bf37-cf73d34c8142"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'characterSet', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6d57fbfb-d8fc-4220-9fd1-73130da498bf">
              <label>ISO lfd. Nr. 6: MD_Metadata.hierarchyLevel</label>
              <description><![CDATA[Prüfung, ob Metadatenelement hierarchyLevel vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID94c516bc-1e84-40ed-9af8-c8304814a0c8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>dataset</li><li>series</li><li>service</li></ul>]]></description>
                  <parent ref="EID6d57fbfb-d8fc-4220-9fd1-73130da498bf"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('dataset', 'series', 'service')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'hierarchyLevel', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9022e632-05f0-43a6-959e-a53ef4971c90">
              <label>ISO lfd. Nr. 6: MD_Metadata.hierarchyLevel</label>
              <description><![CDATA[Prüfung, ob Metadatenelement hierarchyLevel vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc407420d-7f74-410b-a8ff-d603d35297e1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID9022e632-05f0-43a6-959e-a53ef4971c90"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID11d9022f-91bc-45f6-945c-5cc405484a0c">
              <label>ISO lfd. Nr. 6: MD_Metadata.hierarchyLevel</label>
              <description><![CDATA[Prüfung, ob Metadatenelement hierarchyLevel vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID3208aeca-af40-46e2-9dba-c57282cfe4f4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID11d9022f-91bc-45f6-945c-5cc405484a0c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'hierarchyLevel', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb47ef4cb-ad07-4df8-8954-9340dda4f264">
              <label>ISO lfd.Nr.7: MD_Metadata.hierarchyLevelName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement hierarchyLevelName nicht oder maximal einmal vorhanden.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb3f031c2-9550-4f8a-be61-349f500d2e39">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevelName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDb47ef4cb-ad07-4df8-8954-9340dda4f264"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='hierarchyLevelName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbf746a3d-77d2-4161-ad96-ce7039f7a7b0">
              <label>ISO lfd.Nr.8: MD_Metadata.contact</label>
              <description><![CDATA[Prüfung, ob Metadatenelement contact vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID620a7714-69c2-4b0b-aeb1-69fa126f84fb">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contact' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDbf746a3d-77d2-4161-ad96-ce7039f7a7b0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3c6b2186-3617-4538-9317-63b6800afbe1">
              <label>ISO lfd.Nr.10: MD_Metadata.metadataStandardName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement metadataStandardName vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID90c6127f-c292-4ab4-804f-9f037239c4d8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID3c6b2186-3617-4538-9317-63b6800afbe1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='metadataStandardName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID936b3959-aa70-4e2e-9640-93a94526b4a8">
              <label>ISO lfd.Nr.10: MD_Metadata.metadataStandardName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement metadataStandardName vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc8280e55-90f3-496d-bf8d-f8c5988a4deb">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardName' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID936b3959-aa70-4e2e-9640-93a94526b4a8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='metadataStandardName' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'metadataStandardName', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0fba8d5b-85f6-4fce-ad7f-965c0f20ca33">
              <label>ISO lfd.Nr.11: MD_Metadata.metadataStandardVersion</label>
              <description><![CDATA[Prüfung, ob Metadatenelement metadataStandardVersion genau einmal vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb98d7986-a81f-4153-ba88-c8a6ecb6bc77">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardVersion' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID0fba8d5b-85f6-4fce-ad7f-965c0f20ca33"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='metadataStandardVersion' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDebe5ae6f-ebcd-4963-b2d1-ac2114c65765">
              <label>ISO lfd.Nr.11: MD_Metadata.metadataStandardVersion</label>
              <description><![CDATA[Prüfung, ob Metadatenelement metadataStandardVersion genau einmal vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID94c2e57c-422a-4183-a3dd-e9f81f039f6b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardVersion' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDebe5ae6f-ebcd-4963-b2d1-ac2114c65765"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='metadataStandardVersion' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'metadataStandardVersion', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcc76a3ab-a9e6-4ed7-9652-acff0b6e9495">
              <label>ISO lfd.Nr.15: MD_Metadata.identificationInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement identificationInfo genau einmal vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5658e3bc-e33f-4d70-9bd9-e86d08f5bf76">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'identificationInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDcc76a3ab-a9e6-4ed7-9652-acff0b6e9495"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID31feaac2-ad1d-4c43-abde-3a33beb8c5ac">
              <label>ISO lfd.Nr.17: MD_Metadata.distributionInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement distributionInfo genau einmal vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2b22e32c-fdf8-48bd-9db2-a900c8b3b887">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID31feaac2-ad1d-4c43-abde-3a33beb8c5ac"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributionInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDda006f8d-627b-4014-96f2-e49190be91e6">
              <label>ISO lfd.Nr.17: MD_Metadata.distributionInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement distributionInfo genau einmal vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4761e596-81eb-409b-b71f-4c15fa45981b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDda006f8d-627b-4014-96f2-e49190be91e6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distributionInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'distributionInfo', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb31b9576-1a8c-49db-aef7-2ff75e07f43b">
              <label>ISO lfd.Nr.18: MD_Metadata.dataQualityInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement dataQualityInfo vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6fb879cd-9ddf-49fd-9a27-3b3c51fb8bb1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataQualityInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDb31b9576-1a8c-49db-aef7-2ff75e07f43b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf690e981-65cc-46a7-9060-8131c14b1551">
              <label>ISO lfd.Nr.18: MD_Metadata.dataQualityInfo</label>
              <description><![CDATA[Prüfung, ob Metadatenelement dataQualityInfo vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1bf726d0-46a3-4306-ae67-c11ab34fcae2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataQualityInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDf690e981-65cc-46a7-9060-8131c14b1551"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'dataQualityInfo', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0d0de9f5-8356-4519-b9aa-de02a4790c8e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_OperationMetadata' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe93d93f2-5aa8-45ef-8930-fa16d65ac3c8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'DCP' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EID0d0de9f5-8356-4519-b9aa-de02a4790c8e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='SV_OperationMetadata' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='DCP' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'SV_OperationMetadata', 'namespace': 'http://www.isotc211.org/2005/srv', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'DCP', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8549089c-92a9-4103-89c4-1286cd53f99f">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID51bd85e7-a4fb-4d03-8e0c-5a5994c7d0af">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID8549089c-92a9-4103-89c4-1286cd53f99f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Contact', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4f6a06f7-7d98-42fd-a1b0-9b87a3bb0444">
              <label>ISO lfd.Nr.389: CI_Contact.address</label>
              <description><![CDATA[Prüfung, ob Metadatenelement address vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc887e735-475c-4737-9af9-ec1e1701fd81">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'address' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID4f6a06f7-7d98-42fd-a1b0-9b87a3bb0444"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='address' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_Contact', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe9bbe1f1-dd14-45ae-a9f7-85acd3b7cac6">
              <label>ISO lfd.Nr.389: CI_Contact.address</label>
              <description><![CDATA[Prüfung, ob Metadatenelement address vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbe968916-5d5b-44dd-9761-f4829c8e49d3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'address' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDe9bbe1f1-dd14-45ae-a9f7-85acd3b7cac6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='address' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'address', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID49fd90bd-0e20-404b-b366-17e82526ae03">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0a412fee-4db0-4074-9432-2e3a4baf4980">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID49fd90bd-0e20-404b-b366-17e82526ae03"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_Format' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Format', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID21a6831a-6c0c-4c67-b962-4df5c9b6d444">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_GeographicBoundingBox' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID42651b4c-1cd5-4e81-9876-65a628fd30ae">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'EX_GeographicBoundingBox' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID21a6831a-6c0c-4c67-b962-4df5c9b6d444"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='EX_GeographicBoundingBox' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'EX_GeographicBoundingBox', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID94d7c26c-64e2-4d3e-b06c-c7f8d831a850">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID78193f75-aae8-4777-a651-cd81b8246240">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID94d7c26c-64e2-4d3e-b06c-c7f8d831a850"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Address', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7153b712-3a8c-4045-bfff-33c102ebb845">
              <label>ISO lfd.Nr.386: CI_Address.electronicMailAddress</label>
              <description><![CDATA[Prüfung, ob Metadatenelement electronicMailAddress vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe186b69c-0c5a-446e-bc6d-9d722ed275a1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'electronicMailAddress' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID7153b712-3a8c-4045-bfff-33c102ebb845"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='electronicMailAddress' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_Address', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdf74d6f2-a93a-4534-899f-ca0aab1b2d9f">
              <label>ISO lfd.Nr.386: CI_Address.electronicMailAddress</label>
              <description><![CDATA[Prüfung, ob Metadatenelement electronicMailAddress vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID92e97659-7947-4500-b2a8-3777ec8fb226">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'electronicMailAddress' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDdf74d6f2-a93a-4534-899f-ca0aab1b2d9f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='electronicMailAddress' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'electronicMailAddress', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID36fd8c50-cbda-4604-8476-ed349fabc97c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractMD_Identification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe0534ae9-9a16-47fe-87fc-a8bc06d5af8d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'status' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>planned</li><li>underDevelopment</li><li>historicalArchive</li><li>obsolete</li><li>onGoing</li><li>required</li><li>completed</li></ul>]]></description>
                  <parent ref="EID36fd8c50-cbda-4604-8476-ed349fabc97c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('planned', 'underDevelopment', 'historicalArchive', 'obsolete', 'onGoing', 'required', 'completed')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='AbstractMD_Identification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='status' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'AbstractMD_Identification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'status', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID783970b7-e7a4-4cbc-aa96-4a8df49c9d40">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe7d69eae-69ea-4a38-a609-62a5a4f16bea">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID783970b7-e7a4-4cbc-aa96-4a8df49c9d40"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'EX_Extent', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6ebd874b-27b6-448c-bffd-82d8694746f5">
              <label>ISO lfd.Nr.336: EX_Extent.geographicElement</label>
              <description><![CDATA[Prüfung, ob Metadatenelement geographicElement vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID910c9fd6-caf3-4bbf-aea3-0a86cae62610">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geographicElement' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID6ebd874b-27b6-448c-bffd-82d8694746f5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='geographicElement' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'EX_Extent', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb628709f-11a0-4a81-abcf-82055b389bc1">
              <label>ISO lfd.Nr.336: EX_Extent.geographicElement</label>
              <description><![CDATA[Prüfung, ob Metadatenelement geographicElement vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb1541942-f4bb-48bf-8ab7-f146dd0456f7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geographicElement' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDb628709f-11a0-4a81-abcf-82055b389bc1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='geographicElement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'geographicElement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID33af93b4-86b6-4170-abc9-feecc427f61d">
              <label>ISO lfd.Nr.269: MD_PortrayalCatalogueReference.portrayalCatalogueCitation</label>
              <description><![CDATA[Prüfung, ob Metadatenelement portrayalCatalogueCitation vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8499f37f-c62f-4289-a812-3820cd6e2401">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'portrayalCatalogueCitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID33af93b4-86b6-4170-abc9-feecc427f61d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_PortrayalCatalogueReference' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='portrayalCatalogueCitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_PortrayalCatalogueReference', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID660099f3-f357-43a9-9f7d-825a497ee0bc">
              <label>ISO lfd.Nr.160: MD_Georeferenceable.cellGeometry</label>
              <description><![CDATA[Prüfung, ob Metadatenelement cellGeometry vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID78a1e87e-e622-4791-8809-9687f2db4e9c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'cellGeometry' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>area</li><li>point</li></ul>]]></description>
                  <parent ref="EID660099f3-f357-43a9-9f7d-825a497ee0bc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('area', 'point')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_GridSpatialRepresentation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='cellGeometry' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_GridSpatialRepresentation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'cellGeometry', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf3baeddf-4071-41ef-97d6-003ab5378e4c">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2455a129-fb9d-4738-affa-5adbe6cbcaae">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDf3baeddf-4071-41ef-97d6-003ab5378e4c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Distribution', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID71d5bd94-fe4a-4896-90f5-7921411da381">
              <label>ISO lfd.Nr.271: MD_Distribution.distributionFormat</label>
              <description><![CDATA[Prüfung, ob Metadatenelement distributionFormat vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb8dc84e3-cce4-4c95-976d-1c308f680000">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID71d5bd94-fe4a-4896-90f5-7921411da381"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributionFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Distribution', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0d466a7b-02bf-4c17-afa9-f053780c2430">
              <label>ISO lfd.Nr.271: MD_Distribution.distributionFormat</label>
              <description><![CDATA[Prüfung, ob Metadatenelement distributionFormat vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb12240c8-7ebf-4fb5-94e0-c682a07a6ae2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionFormat' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID0d466a7b-02bf-4c17-afa9-f053780c2430"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distributionFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'distributionFormat', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID27cee9fc-6fa7-4d05-8dd8-ad132a10017f">
              <label>ISO lfd.Nr.187: MD_ReferenceSystem.referenceSystemIdentifier</label>
              <description><![CDATA[Prüfung, ob Metadatenelement referenceSystemIdentifier vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9cc590ed-9829-4e41-a7b8-67584a911eaf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'referenceSystemIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID27cee9fc-6fa7-4d05-8dd8-ad132a10017f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_ReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='referenceSystemIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_ReferenceSystem', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe17b75a0-4e86-4df4-a595-b9ab091a0cd9">
              <label>ISO lfd.Nr.187: MD_ReferenceSystem.referenceSystemIdentifier</label>
              <description><![CDATA[Prüfung, ob Metadatenelement referenceSystemIdentifier vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8b2c00d1-e1d0-4b71-a45d-eb090fc53b47">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'referenceSystemIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDe17b75a0-4e86-4df4-a595-b9ab091a0cd9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $propertiesFound := $record//*[local-name()='MD_ReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='referenceSystemIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'referenceSystemIdentifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb767a321-4005-415d-a5d4-11ff901f63e8">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ReferenceSystem' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7ca641e9-f5fa-41d6-ab05-12bb83945017">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_ReferenceSystem' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDb767a321-4005-415d-a5d4-11ff901f63e8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='MD_ReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_ReferenceSystem', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID058a35a7-4be4-4b77-b607-ba1d6c5cf22a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ExtendedElementInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2f99d217-f5d2-47a1-a212-f04fc06bd039">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>unionClass</li><li>interfaceClass</li><li>enumeration</li><li>integer</li><li>codelistElement</li><li>aggregateClass</li><li>datatypeClass</li><li>abstractClass</li><li>specifiedClass</li><li>association</li><li>typeClass</li><li>codelist</li><li>metaClass</li><li>characterString</li><li>class</li></ul>]]></description>
                  <parent ref="EID058a35a7-4be4-4b77-b607-ba1d6c5cf22a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('unionClass', 'interfaceClass', 'enumeration', 'integer', 'codelistElement', 'aggregateClass', 'datatypeClass', 'abstractClass', 'specifiedClass', 'association', 'typeClass', 'codelist', 'metaClass', 'characterString', 'class')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_ExtendedElementInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dataType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_ExtendedElementInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'dataType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9f8257f2-c18b-4201-893b-e81c02c71f3c">
              <label>ISO lfd.Nr.307: MD_ExtendedElementInformation.name</label>
              <description><![CDATA[Prüfung, ob Metadatenelement name vorhanden und ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdf534e1b-7afc-41a8-b274-5f94070ad025">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EID9f8257f2-c18b-4201-893b-e81c02c71f3c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_ExtendedElementInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/*/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_ExtendedElementInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/*/text(), 'propName': 'name', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID16497130-b985-45e4-b577-1a863ba3940d">
              <label>ISO lfd.Nr.395: CI_Date.dateType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement dateType vorhanden und ob ein Wert der vorgegebenen Werteliste enthalten ist.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID16ed119a-5f3d-47a0-be62-2537ebb71411">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dateType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>creation</li><li>publication</li><li>revision</li></ul>]]></description>
                  <parent ref="EID16497130-b985-45e4-b577-1a863ba3940d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('creation', 'publication', 'revision')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dateType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'CI_Date', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'dateType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDff5903d0-1d1e-4011-809d-2c8c72257c32">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Date' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa1dcb8de-dd37-4414-b800-5f507b57723a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Date' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDff5903d0-1d1e-4011-809d-2c8c72257c32"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Date', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID98421b78-12f0-4076-a84e-5dab403e88af">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1fdddb41-6ba7-44f9-b9a8-e05889d729d4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'presentationForm' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>mapHardcopy</li><li>videoHardcopy</li><li>profileHardcopy</li><li>documentDigital</li><li>modelDigital</li><li>documentHardcopy</li><li>modelHardcopy</li><li>videoDigital</li><li>mapDigital</li><li>profileDigital</li><li>imageHardcopy</li><li>tableDigital</li><li>imageDigital</li><li>tableHardcopy</li></ul>]]></description>
                  <parent ref="EID98421b78-12f0-4076-a84e-5dab403e88af"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('mapHardcopy', 'videoHardcopy', 'profileHardcopy', 'documentDigital', 'modelDigital', 'documentHardcopy', 'modelHardcopy', 'videoDigital', 'mapDigital', 'profileDigital', 'imageHardcopy', 'tableDigital', 'imageDigital', 'tableHardcopy')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='presentationForm' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'CI_Citation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'presentationForm', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9322afdc-4e48-4d4e-9510-b66554a82bfc">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1503d2f2-173b-4c29-970a-978b02a447b4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID9322afdc-4e48-4d4e-9510-b66554a82bfc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Citation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID887dbb67-29e9-4989-8477-7123d305940e">
              <label>Prüfung, ob in Ergänzung zum Titel der Ressource ein Alternativtitel vorhanden ist der ggf. die Produktgruppe  ausweist.</label>
              <description><![CDATA[Für eine fachliche Zuordnung der Metadatensätze zu Produktgruppen soll die Struktur MD_Identification mit den geforderten Elementen und Folgeelementen in Unterstrukturen (ggf. auch in inhaltlicher Abhängigkeit) belegt sein.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb28476d1-6858-4035-b8ce-24314d70b325">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'alternateTitle' and namespace 'http://www.isotc211.org/2005/gmd' should be evaluated manually for correctness.]]></description>
                  <parent ref="EID887dbb67-29e9-4989-8477-7123d305940e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>NOT_APPLICABLE</expression>
                  <testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9d895520-dd83-4568-b6c4-2f0ef17ea128">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Constraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa9af55fd-2293-4486-844b-d9804cf32880">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0]]></description>
                  <parent ref="EID9d895520-dd83-4568-b6c4-2f0ef17ea128"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Constraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Constraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDfa929df9-0349-4e5d-8103-b4e3b779a63f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_ServiceIdentification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID232e5f45-15ec-4902-87ae-fcfe4cade44e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'couplingType' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>loose</li><li>mixed</li><li>tight</li></ul>]]></description>
                  <parent ref="EIDfa929df9-0349-4e5d-8103-b4e3b779a63f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('loose', 'mixed', 'tight')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='SV_ServiceIdentification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='couplingType' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'SV_ServiceIdentification', 'namespace': 'http://www.isotc211.org/2005/srv', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'couplingType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf6cdbe68-1d71-4046-994a-592877c7bbe9">
              <label>ISO lfd.Nr.307: MD_ExtendedElementInformation.name</label>
              <description><![CDATA[Prüfung, ob Metadatenelement name vorhanden und ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf753047d-d19e-4db5-adb1-720096dd71d1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EIDf6cdbe68-1d71-4046-994a-592877c7bbe9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_ApplicationSchemaInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_ApplicationSchemaInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/text(), 'propName': 'name', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7e1fa12a-3303-46b9-919f-300424871813">
              <label>ISO lfd.Nr.103: DQ_TopologicalConsistency.evaluationMethodType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement evaluationMethodType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdbfa61c8-04af-454f-9a4a-8bd67a9ed4ad">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID7e1fa12a-3303-46b9-919f-300424871813"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'DQ_TopologicalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/text(), 'propName': 'evaluationMethodType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd51d1f7f-e90c-4f27-a2af-fcd8045a8cca">
              <label>ISO lfd.Nr.93: LI_Source.description</label>
              <description><![CDATA[Prüfung, ob Metadatenelement description vorhanden.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5488f758-ee17-4767-a467-8cc9582b1b16">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'description' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDd51d1f7f-e90c-4f27-a2af-fcd8045a8cca"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='LI_Source' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='description' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Source', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDde150e70-db12-4016-96ac-b1ecbfd980de">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_VectorSpatialRepresentation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdd68375a-7fde-4662-9d2f-1830bc7d0b92">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topologyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>fullPlanarGraph</li><li>geometryOnly</li><li>surfaceGraph</li><li>fullSurfaceGraph</li><li>topology1D</li><li>planarGraph</li><li>fullTopology3D</li><li>abstract</li><li>topology3D</li></ul>]]></description>
                  <parent ref="EIDde150e70-db12-4016-96ac-b1ecbfd980de"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('fullPlanarGraph', 'geometryOnly', 'surfaceGraph', 'fullSurfaceGraph', 'topology1D', 'planarGraph', 'fullTopology3D', 'abstract', 'topology3D')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_VectorSpatialRepresentation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='topologyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_VectorSpatialRepresentation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'topologyLevel', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb20d39c4-4cd5-4555-b557-6006e3c372c0">
              <label>ISO lfd.Nr.178: MD_VectorSpatialRepresentation.geometricObjects</label>
              <description><![CDATA[Prüfung, ob Metadatenelement geometricObjects mindestens einmal vorhanden.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9c1f344f-92bf-4c1a-ae57-ea94ef5063fe">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geometricObjects' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDb20d39c4-4cd5-4555-b557-6006e3c372c0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_VectorSpatialRepresentation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='geometricObjects' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_VectorSpatialRepresentation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8cebf083-2330-4721-9f29-97742fe19ab9">
              <label>ISO lfd.Nr.103: DQ_TopologicalConsistency.evaluationMethodType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement evaluationMethodType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbd0d1285-c47b-49b0-bb1d-fad31e5760b2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID8cebf083-2330-4721-9f29-97742fe19ab9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'DQ_CompletenessOmission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/text(), 'propName': 'evaluationMethodType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID730ce1fc-1d24-4efb-a03b-46ecd1ce2321">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_GeometricObjects' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID49118333-c8d8-4284-beb2-27dada4d2cda">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geometricObjectType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>complex</li><li>point</li><li>composite</li><li>curve</li><li>solid</li><li>surface</li></ul>]]></description>
                  <parent ref="EID730ce1fc-1d24-4efb-a03b-46ecd1ce2321"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('complex', 'point', 'composite', 'curve', 'solid', 'surface')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_GeometricObjects' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='geometricObjectType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_GeometricObjects', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'geometricObjectType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1e989ca6-9e5e-4855-b8bc-2a65d948d747">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID212b3888-4c5b-4ce3-ae5b-1d3b8896da4b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'languageCode' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>French</li><li>English</li></ul>]]></description>
                  <parent ref="EID1e989ca6-9e5e-4855-b8bc-2a65d948d747"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('French', 'English')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='languageCode' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'languageCode', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbe8752ce-f190-4647-9a4d-03d2f38f67e9">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID503ccacb-f427-41c4-87e0-febddc26091f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'country' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>United Kingdom</li><li>France</li></ul>]]></description>
                  <parent ref="EIDbe8752ce-f190-4647-9a4d-03d2f38f67e9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('United Kingdom', 'France')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='country' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'country', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc6d0bb5e-c772-465a-9d5c-27166b96ef92">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID86770d1a-c951-48ac-b87d-6f890a956660">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterEncoding' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>utf8</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EIDc6d0bb5e-c772-465a-9d5c-27166b96ef92"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'utf8', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterEncoding' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'characterEncoding', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa77c2ce7-f148-4d8b-90b5-d15e1d956e69">
              <label>ISO lfd.Nr.103: DQ_TopologicalConsistency.evaluationMethodType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement evaluationMethodType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2d804062-cd39-408f-b6c7-00112d9ff9e3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDa77c2ce7-f148-4d8b-90b5-d15e1d956e69"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'DQ_AbsoluteExternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound/text(), 'propName': 'evaluationMethodType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe3eb846d-4ea8-4246-9ec5-b342bb875727">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'RS_Identifier' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID64dfae64-55eb-425a-b762-7f881980718e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'RS_Identifier' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDe3eb846d-4ea8-4246-9ec5-b342bb875727"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='RS_Identifier' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'RS_Identifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc0a9c3b0-20c6-4c98-b494-a20396f67f00">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'RS_Identifier' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa654a2d8-abd9-40cd-b3fa-5dcd832b1801">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'RS_Identifier' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDc0a9c3b0-20c6-4c98-b494-a20396f67f00"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='RS_Identifier' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'RS_Identifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7254f3f5-9dd5-47d7-9c76-10fea9e8af78">
              <label>Prüfung ob die Angabe des Koordinatenreferenzsystems als EPSG Code als Direktaufruf in den Metadaten zu Geodaten bzw. Geoda-tendienste hinterlegt ist.</label>
              <description><![CDATA[Für Geodaten in der GDI-DE ist der entsprechende EPSG Code als Direktlink zu referenzieren. Der EPSG-Code (z. B. „4326“) ist dabei der konkrete Identifikator für das Referenzsystem gemäß http://www.epsg-registry.org/  und ist mittels gmx:Anchor Element zu referenzieren.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID19df4c70-dca8-450e-976e-e53e33e63813">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'code' and namespace 'http://www.isotc211.org/2005/gmd' should be evaluated manually for correctness.]]></description>
                  <parent ref="EID7254f3f5-9dd5-47d7-9c76-10fea9e8af78"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>NOT_APPLICABLE</expression>
                  <testItemType ref="EIDb48eeaa3-6a74-414a-879c-1dc708017e11"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID31d3328e-ac5f-4f4e-911c-07fff8a37752">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_Scope' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0a09042f-08d7-4239-87a9-10da5d3259bb">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'DQ_Scope' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID31d3328e-ac5f-4f4e-911c-07fff8a37752"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
       let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
       let $title := count($record//*[local-name()='DQ_Scope' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return
       if (not($title)) then
        local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'DQ_Scope', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record) })
       else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd3353051-3ab3-46e6-b3e9-83f7fb1b21d2">
              <label>ISO lfd.Nr.139: DQ_Scope.level</label>
              <description><![CDATA[Prüfung, ob Metadatenelement level vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcf957f04-3da4-48b0-ad2b-2302069b08be">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'level' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>software</li><li>nonGeographicDataset</li><li>collectionHardware</li><li>fieldSession</li><li>feature</li><li>dimensionGroup</li><li>collectionSession</li><li>attributeType</li><li>series</li><li>service</li><li>propertyType</li><li>featureType</li><li>tile</li><li>model</li><li>attribute</li><li>dataset</li></ul>]]></description>
                  <parent ref="EIDd3353051-3ab3-46e6-b3e9-83f7fb1b21d2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('software', 'nonGeographicDataset', 'collectionHardware', 'fieldSession', 'feature', 'dimensionGroup', 'collectionSession', 'attributeType', 'series', 'service', 'propertyType', 'featureType', 'tile', 'model', 'attribute', 'dataset')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='DQ_Scope' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='level' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'DQ_Scope', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'level', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1b9555e4-ad63-424a-9467-02825623db75">
              <label>ISO lfd.Nr.66.2: MD_AggregateInformation.aggregateDataSetName</label>
              <description><![CDATA[Prüfung, ob Metadatenelement aggregateDataSetName vorhanden.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbef9d3c8-8268-46c8-97bd-2ae127be66bf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'aggregateDataSetName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID1b9555e4-ad63-424a-9467-02825623db75"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_AggregateInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='aggregateDataSetName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_AggregateInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDebd48187-0782-4d38-83b7-558a975955fa">
              <label>ISO lfd.Nr.66.4:  MD_AggregateInformation.associationType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement associationType vorhanden und inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID649676db-577b-47dc-b02a-c56f6272c162">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'associationType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>partOfSeamlessDatabase</li><li>crossReference</li><li>stereoMate</li><li>source</li><li>largerWorkCitation</li></ul>]]></description>
                  <parent ref="EIDebd48187-0782-4d38-83b7-558a975955fa"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('partOfSeamlessDatabase', 'crossReference', 'stereoMate', 'source', 'largerWorkCitation')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_AggregateInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='associationType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_AggregateInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'associationType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDac86ef64-f5b2-4232-b4b2-1c8fbd8dfc75">
              <label>ISO lfd.Nr.B.5.8: MD_AggregateInformation.initiativeType</label>
              <description><![CDATA[Prüfung, ob Metadatenelement initiativeType ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8992558c-d65f-4bf8-8cd4-f31d581124e0">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'initiativeType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>process</li><li>study</li><li>project</li><li>exercise</li><li>program</li><li>collection</li><li>trial</li><li>platform</li><li>mission</li><li>task</li><li>experiment</li><li>campaign</li><li>investigation</li><li>sensor</li><li>operation</li></ul>]]></description>
                  <parent ref="EIDac86ef64-f5b2-4232-b4b2-1c8fbd8dfc75"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('process', 'study', 'project', 'exercise', 'program', 'collection', 'trial', 'platform', 'mission', 'task', 'experiment', 'campaign', 'investigation', 'sensor', 'operation')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_AggregateInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='initiativeType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_AggregateInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'initiativeType', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3e9d1214-5643-4e69-a706-e9df84007eb1">
              <label>ISO lfd.Nr.307: MD_ExtendedElementInformation.name</label>
              <description><![CDATA[Prüfung, ob Metadatenelement name vorhanden und ein Wert der vorgegebenen Werteliste enthält.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID749af005-8e2e-462c-9dc3-7a41a0a6051d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>telephoneLink</li><li>7trackTape</li><li>9trackType</li><li>3490Cartridge</li><li>5quarterInchFloppy</li><li>1quarterInchCartridgeTape</li><li>8mmCartridgeTape</li><li>digitalLinearTape</li><li>dvdRom</li><li>3480Cartridge</li><li>dvd</li><li>3halfInchFloppy</li><li>3580Cartridge</li><li>4mmCartridgeTape</li><li>cdRom</li><li>satellite</li><li>onLine</li><li>hardcopy</li></ul>]]></description>
                  <parent ref="EID3e9d1214-5643-4e69-a706-e9df84007eb1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('telephoneLink', '7trackTape', '9trackType', '3490Cartridge', '5quarterInchFloppy', '1quarterInchCartridgeTape', '8mmCartridgeTape', 'digitalLinearTape', 'dvdRom', '3480Cartridge', 'dvd', '3halfInchFloppy', '3580Cartridge', '4mmCartridgeTape', 'cdRom', 'satellite', 'onLine', 'hardcopy')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Medium' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Medium', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'name', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID43089d92-76ec-4bde-b565-03456f6cbd04">
              <label>ISO lfd.Nr.296: MD_Medium.mediumFormat</label>
              <description><![CDATA[Prüfung, ob Metadatenelement mediumFormat inhaltlich korrekt.]]></description>
              <parent ref="EIDef2721ea-bac2-4d4b-bfc0-cc686936ee01"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe6430c2f-3bc4-49aa-9bd5-13ceef825358">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'mediumFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>iso9660RockRidge</li><li>cpio</li><li>iso9660AppleHFS</li><li>iso9660</li><li>tar</li><li>highSierra</li></ul>]]></description>
                  <parent ref="EID43089d92-76ec-4bde-b565-03456f6cbd04"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('iso9660RockRidge', 'cpio', 'iso9660AppleHFS', 'iso9660', 'tar', 'highSierra')
let $messages :=
  (for $record in $db
     let $rid := $record//*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/text()
     let $typesFound := $record//*[local-name()='MD_Medium' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='mediumFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'localName': 'MD_Medium', 'namespace': 'http://www.isotc211.org/2005/gmd', 'fileIdentifier': $rid, 'filename': local:filename($record), 'valueFound': $propertyFound, 'propName': 'mediumFormat', 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
