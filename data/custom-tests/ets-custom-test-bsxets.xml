<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID74446eb2-8a49-40d1-995f-25745eb906e8" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>BaWü Daten</label>
  <description><![CDATA[based on excel table 'ProfilTabellefuerWetransformAP3_V13_180516' using column E]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>Johanna Ott</author>
  <creationDate>2018-09-20T08:38:10.109Z</creationDate>
  <lastEditor>Johanna Ott</lastEditor>
  <lastUpdateDate>2018-09-20T08:38:10.109Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EID8306ed5f-7bc2-463e-823b-b40bf66af22d">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EID74446eb2-8a49-40d1-995f-25745eb906e8"/>
      <testCases>
        <TestCase id="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729">
          <label>Komplexe Einschränkungen (Constraint Editor)</label>
          <description><![CDATA[Komplexe Einschränkungen (Constraint Editor)]]></description>
          <parent ref="EID8306ed5f-7bc2-463e-823b-b40bf66af22d"/>
          <testSteps>
            <TestStep id="EID18ec5a85-2341-43e3-b782-df53e52e38a2">
              <label>laufende Nummern 69 und 73</label>
              <description><![CDATA[nach INSPIRE-Metadaten-Verordnung muss entweder Nr. 69 "MD_Legal Constraints" oder Nr. 73 "MD_Security Constraints" belegt werden.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID342b36d8-679e-4d81-8e89-7f32311b9d06">
                  <label>laufende Nummern 69 und 73</label>
                  <description><![CDATA[nach INSPIRE-Metadaten-Verordnung muss entweder Nr. 69 "MD_Legal Constraints" oder Nr. 73 "MD_Security Constraints" belegt werden.]]></description>
                  <parent ref="EID18ec5a85-2341-43e3-b782-df53e52e38a2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
    )[position() le $limitErrors]
 let $totalNumberErrors := count(($messages0, $messages1))
 let $messages := 
  if($totalNumberErrors eq 1) then ()
  else if ($totalNumberErrors eq 0) then
    local:addMessage('TR.xorAllConditionsMatched', map { 'localName': 'notRelevant' })

  else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd7726964-072e-4897-ae78-f697cbe7d93a">
              <label>laufende Nummer 80</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis der INSPIRE-Konformität, sofern die Geodaten der INSPIRE-Richtlinie unterliegen]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID3bef99e3-dd5f-4dc0-b6cf-e0f147806d55">
                  <label>laufende Nummer 80</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis der INSPIRE-Konformität, sofern die Geodaten der INSPIRE-Richtlinie unterliegen]]></description>
                  <parent ref="EIDd7726964-072e-4897-ae78-f697cbe7d93a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'report', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDeb958a94-001c-4d70-b34f-ecbad505ce5f">
              <label>laufende Nummer 7</label>
              <description><![CDATA[verpflichtend aus ISO 19115, wenn Hierarchiebene
nicht "Geodatensatz" ist]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7aada22d-1367-4ad3-b3c4-235050a15b6f">
                  <label>laufende Nummer 7</label>
                  <description><![CDATA[verpflichtend aus ISO 19115, wenn Hierarchiebene
nicht "Geodatensatz" ist]]></description>
                  <parent ref="EIDeb958a94-001c-4d70-b34f-ecbad505ce5f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_ScopeCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='dataset'])
       let $thenPropertyCount := count($typeFound/*[local-name()='hierarchyLevelName' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'hierarchyLevelName', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe53fb10d-0255-40a2-9f84-6530d37242b2">
              <label>laufende Nummer 16</label>
              <description><![CDATA[Verweis auf einen Objektartenkatalog; in der GDI-BW verpflichtend für Datensätze, die einem Thema der Geodatenbasis BW zugeordent werden]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1fc08da3-1ac4-44b0-b0fd-473f6f7a991c">
                  <label>laufende Nummer 16</label>
                  <description><![CDATA[Verweis auf einen Objektartenkatalog; in der GDI-BW verpflichtend für Datensätze, die einem Thema der Geodatenbasis BW zugeordent werden]]></description>
                  <parent ref="EIDe53fb10d-0255-40a2-9f84-6530d37242b2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Abfall'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Abwasser'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Agrarmanagement'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Agrarstruktur'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Altlasten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Arbeitsplatz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Arbeitsschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Artenschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bauleitplanung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bauwesen und gebaute Umwelt'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bergbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Biotopschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Boden'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Chemikalien'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Energie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages15 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Fernerkundung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages16 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Flurbereinigung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages17 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Forstwirtschaft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages18 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geodäsie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages19 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages20 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geologie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages21 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gesundheit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages22 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gewässerschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages23 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gewerbe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages24 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Grundwasser'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages25 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Grundwasserschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages26 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Hochwasserschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages27 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Höhe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages28 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Immissionsschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages29 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Kataster'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages30 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Kartographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages31 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Katastrophenschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages32 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Landschaftsplanung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages33 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Landwirtschaft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages34 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Luft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages35 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Klima'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages36 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Messung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages37 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Monitoring'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages38 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Naturschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages39 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Oberflächengewässer'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages40 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Obstbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages41 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Raumordnung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages42 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Rohstoffe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages43 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Schadstoff'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages44 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Simulation'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages45 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Statistik'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages46 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Strahlung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages47 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Straße'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages48 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Tierkrankheit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages49 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Tourismus und Freizeit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages50 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Umweltrecht'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages51 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Umweltschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages52 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Verkehr'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages53 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Verwaltung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages54 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Wasserbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages55 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Wasserversorgung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages56 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Weinbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages57 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geobasisdaten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages58 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Topographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'contentInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14, $messages15, $messages16, $messages17, $messages18, $messages19, $messages20, $messages21, $messages22, $messages23, $messages24, $messages25, $messages26, $messages27, $messages28, $messages29, $messages30, $messages31, $messages32, $messages33, $messages34, $messages35, $messages36, $messages37, $messages38, $messages39, $messages40, $messages41, $messages42, $messages43, $messages44, $messages45, $messages46, $messages47, $messages48, $messages49, $messages50, $messages51, $messages52, $messages53, $messages54, $messages55, $messages56, $messages57, $messages58)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID56a22d07-bf1b-4192-8e03-2bfed77ad64d">
              <label>laufende Nummer 365</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, wenn Klasse unter Nr. 24 "Bibliographische Angaben" verwendet wird; 
Empfehlung:  
ist der Geodatensatz an einen Dienst gekoppelt, so soll hier der Identifikator angegeben werden, auf den sich der Dienst bezieht 

 (vgl. Nr. 2.2.5 der Guidelines zur Verordnung)]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc49b14a3-5a40-45ce-bb58-f36d7ba558e0">
                  <label>laufende Nummer 365</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, wenn Klasse unter Nr. 24 "Bibliographische Angaben" verwendet wird; 
Empfehlung:  
ist der Geodatensatz an einen Dienst gekoppelt, so soll hier der Identifikator angegeben werden, auf den sich der Dienst bezieht 

 (vgl. Nr. 2.2.5 der Guidelines zur Verordnung)]]></description>
                  <parent ref="EID56a22d07-bf1b-4192-8e03-2bfed77ad64d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='identifier' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'identifier', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID116e36d0-ae7a-4db2-96d6-ba9f90c3cca0">
              <label>laufende Nummer 237</label>
              <description><![CDATA[in der GDI-BW verpflichtend für Datensätze, die einem Thema der Geodatenbasis BW zugeordnet werden]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0cbc9e1d-71ae-4867-ae82-a8c91679bb46">
                  <label>laufende Nummer 237</label>
                  <description><![CDATA[in der GDI-BW verpflichtend für Datensätze, die einem Thema der Geodatenbasis BW zugeordnet werden]]></description>
                  <parent ref="EID116e36d0-ae7a-4db2-96d6-ba9f90c3cca0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Abfall'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Abwasser'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Agrarmanagement'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Agrarstruktur'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Altlasten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Arbeitsplatz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Arbeitsschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Artenschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bauleitplanung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bauwesen und gebaute Umwelt'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Bergbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Biotopschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Boden'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Chemikalien'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Energie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages15 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Fernerkundung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages16 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Flurbereinigung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages17 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Forstwirtschaft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages18 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geodäsie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages19 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages20 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geologie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages21 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gesundheit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages22 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gewässerschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages23 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Gewerbe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages24 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Grundwasser'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages25 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Grundwasserschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages26 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Hochwasserschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages27 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Höhe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages28 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Immissionsschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages29 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Kataster'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages30 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Kartographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages31 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Katastrophenschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages32 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Landschaftsplanung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages33 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Landwirtschaft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages34 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Luft'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages35 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Klima'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages36 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Messung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages37 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Monitoring'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages38 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Naturschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages39 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Oberflächengewässer'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages40 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Obstbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages41 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Raumordnung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages42 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Rohstoffe'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages43 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Schadstoff'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages44 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Simulation'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages45 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Statistik'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages46 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Strahlung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages47 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Straße'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages48 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Tierkrankheit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages49 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Tourismus und Freizeit'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages50 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Umweltrecht'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages51 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Umweltschutz'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages52 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Verkehr'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages53 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Verwaltung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages54 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Wasserbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages55 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Wasserversorgung'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages56 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Weinbau'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages57 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Geobasisdaten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages58 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='Topographie'])
       let $thenPropertyCount := count($typeFound/*[local-name()='contentInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='featureTypes' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'featureTypes', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14, $messages15, $messages16, $messages17, $messages18, $messages19, $messages20, $messages21, $messages22, $messages23, $messages24, $messages25, $messages26, $messages27, $messages28, $messages29, $messages30, $messages31, $messages32, $messages33, $messages34, $messages35, $messages36, $messages37, $messages38, $messages39, $messages40, $messages41, $messages42, $messages43, $messages44, $messages45, $messages46, $messages47, $messages48, $messages49, $messages50, $messages51, $messages52, $messages53, $messages54, $messages55, $messages56, $messages57, $messages58)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8449fbe1-c872-436a-b0a8-36412b980b30">
              <label>laufende Nummern 60 und 61</label>
              <description><![CDATA[verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 61 "Distanz" geschieht
verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 60 "Vergleichsmaßstab" geschieht]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcaeb968b-be5d-4da8-95b6-08ae26d60e08">
                  <label>laufende Nummern 60 und 61</label>
                  <description><![CDATA[verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 61 "Distanz" geschieht
verpflichtend, wenn Angaben zur Auflösung gemacht werden, aber dies nicht über Nr. 60 "Vergleichsmaßstab" geschieht]]></description>
                  <parent ref="EID8449fbe1-c872-436a-b0a8-36412b980b30"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Resolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='equivalentScale' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'equivalentScale', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='spatialResolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Resolution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distance' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'distance', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $totalNumberErrors := count(($messages0, $messages1))
 let $messages := 
  if($totalNumberErrors eq 1) then ()
  else if ($totalNumberErrors eq 0) then
    local:addMessage('TR.xorAllConditionsMatched', map { 'localName': 'notRelevant' })

  else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd14af22b-3491-4c72-ae5d-d1416ba95993">
              <label>laufende Nummer 101</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis des Identifikators des INSPIRE-Konformitätstests, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5a31153f-4821-4800-84be-3f6e0551e679">
                  <label>laufende Nummer 101</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis des Identifikators des INSPIRE-Konformitätstests, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
                  <parent ref="EIDd14af22b-3491-4c72-ae5d-d1416ba95993"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='measureIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'measureIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8b8f606c-c03f-415c-916c-3141fd6bfbca">
              <label>laufende Nummer 107</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis des Ergebnisses eines INSPIRE-Konformitätstests, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDab621228-599b-47f9-ae02-b0756f8bde75">
                  <label>laufende Nummer 107</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung zum Nachweis des Ergebnisses eines INSPIRE-Konformitätstests, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
                  <parent ref="EID8b8f606c-c03f-415c-916c-3141fd6bfbca"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'result', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID20584589-0752-497a-b3d9-b1293d42d093">
              <label>laufende Nummer 130</label>
              <description><![CDATA[verpflichtend nach INSPIRE-Metadaten-Verordnung zum Nachweis der einschlägigen INSPIRE-Datenspezifikation, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)

Die Informationen zur Konformität werden je geprüfter Spezifikation angegeben. Der Titel der Spezifikation ist analog zum Beispiel Datensatz zu verwenden.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7e92c75e-0758-4964-8f24-9775232619a6">
                  <label>laufende Nummer 130</label>
                  <description><![CDATA[verpflichtend nach INSPIRE-Metadaten-Verordnung zum Nachweis der einschlägigen INSPIRE-Datenspezifikation, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)

Die Informationen zur Konformität werden je geprüfter Spezifikation angegeben. Der Titel der Spezifikation ist analog zum Beispiel Datensatz zu verwenden.]]></description>
                  <parent ref="EID20584589-0752-497a-b3d9-b1293d42d093"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'specification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID543da0f9-20cc-4414-8519-736e2c243625">
              <label>laufende Nummer 131</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1e3817ab-ff3a-483e-923d-1f2125062159">
                  <label>laufende Nummer 131</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80)]]></description>
                  <parent ref="EID543da0f9-20cc-4414-8519-736e2c243625"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='explanation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'explanation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3f2301f3-1036-4de8-bb97-4d945e903949">
              <label>laufende Nummer 132</label>
              <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80). Auf die Verwendung von „not evaluated“ soll nach Möglichkeit verzichtet werden.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdc047237-fae2-4721-83f7-2efafb400837">
                  <label>laufende Nummer 132</label>
                  <description><![CDATA[verpflichtend aus INSPIRE-Metadaten-Verordnung, sofern die Geodaten der INSPIRE-Richtlinie unterliegen (vgl. Nr. 80). Auf die Verwendung von „not evaluated“ soll nach Möglichkeit verzichtet werden.]]></description>
                  <parent ref="EID3f2301f3-1036-4de8-bb97-4d945e903949"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pass' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'pass', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID506f851d-b4a8-41a1-98f2-557452861328">
              <label>laufende Nummern 70 und 72 und 74</label>
              <description><![CDATA[Nach INSPIRE-Metadaten-Verordnung ist mindestens ein Element der Nrn. 70, 72 oder 74 anzugeben (vgl. Nr. 2.9 der Guidelines zur Verordnung).]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9d418b23-2b82-49fb-a13a-da272ea8944e">
                  <label>laufende Nummern 70 und 72 und 74</label>
                  <description><![CDATA[Nach INSPIRE-Metadaten-Verordnung ist mindestens ein Element der Nrn. 70, 72 oder 74 anzugeben (vgl. Nr. 2.9 der Guidelines zur Verordnung).]]></description>
                  <parent ref="EID506f851d-b4a8-41a1-98f2-557452861328"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'accessConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='classification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount eq 0) then 
         local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'classification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0)) then ()
   else ($messages0, $messages1, $messages2)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa3d0d045-cc3f-40bc-868a-eba994d7611b">
              <label>laufende Nummer 70</label>
              <description><![CDATA[Wird Nr. 72 belegt, so ist in Nr. 70 mindestens der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" anzugeben.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe1c9abf3-2454-4a23-9464-80202520b2e9">
                  <label>laufende Nummer 70</label>
                  <description><![CDATA[Wird Nr. 72 belegt, so ist in Nr. 70 mindestens der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" anzugeben.]]></description>
                  <parent ref="EIDa3d0d045-cc3f-40bc-868a-eba994d7611b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'codeListValue', 'namespace': '', 'expectedValue': 'otherRestrictions' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1a1a2afc-e8b6-4678-bb42-743a651300a7">
              <label>laufende Nummer 72</label>
              <description><![CDATA[Nr. 72 ist verpflichtend zu belegen, wenn in Nr. 70 der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" angegeben wird.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0e49b800-91f2-4198-a0ce-e313babf8531">
                  <label>laufende Nummer 72</label>
                  <description><![CDATA[Nr. 72 ist verpflichtend zu belegen, wenn in Nr. 70 der Wert der Codelist B.5.24 Nr. 9 "other Restrictions / andere Beschränkungen" angegeben wird.]]></description>
                  <parent ref="EID1a1a2afc-e8b6-4678-bb42-743a651300a7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_RestrictionCode' and namespace-uri()='http://www.isotc211.org/2005/gmd'][@codeListValue='otherRestrictions'])
       let $thenPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='otherConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'otherConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3ac06134-cb15-43e3-ba53-55de73a36c87">
              <label>laufende Nummer 129</label>
              <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID937497c7-707d-45f5-91a9-272d0adfacb2">
                  <label>laufende Nummer 129</label>
                  <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
                  <parent ref="EID3ac06134-cb15-43e3-ba53-55de73a36c87"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages2 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages3 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages4 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages5 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages6 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages7 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages8 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages9 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages10 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages11 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages12 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages13 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
let $messages14 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='keyword' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='inspireidentifiziert'])
       let $thenPropertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='report' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='result' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'CharacterString', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': 'VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := 
   if ((count($messages0) eq 0) or (count($messages1) eq 0) or (count($messages2) eq 0) or (count($messages3) eq 0) or (count($messages4) eq 0) or (count($messages5) eq 0) or (count($messages6) eq 0) or (count($messages7) eq 0) or (count($messages8) eq 0) or (count($messages9) eq 0) or (count($messages10) eq 0) or (count($messages11) eq 0) or (count($messages12) eq 0) or (count($messages13) eq 0) or (count($messages14) eq 0)) then ()
   else ($messages0, $messages1, $messages2, $messages3, $messages4, $messages5, $messages6, $messages7, $messages8, $messages9, $messages10, $messages11, $messages12, $messages13, $messages14)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2df16f90-9b43-4d84-a270-a81d3a906048">
              <label>laufende Nummer 129</label>
              <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
              <parent ref="EID72bc8eb8-2edf-42a9-b7e9-a19b40f62729"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfce71a23-a656-4a65-abe4-ca7eafe0b267">
                  <label>laufende Nummer 129</label>
                  <description><![CDATA[bezieht Verpflichtung aus Nr. 107 "result"

Grundsätzlich sind in INSPIRE-Metadaten mindestens die Durchführungsbestimmungen anzugeben. In zusätzlichen DQ_ConformanceResult-Elementen können Änderungsverordnungen, die die Durchfüh-rungsbestimmungen betreffen sowie Technical Guidance zu Datenspezifikationen und Netzdiensten referenziert werden.]]></description>
                  <parent ref="EID2df16f90-9b43-4d84-a270-a81d3a906048"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ConformanceResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $ifPropertyCount := count($typeFound/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='title' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='VERORDNUNG (EG) Nr. 1089/2010 DER KOMMISSION vom 23. November 2010 zur Durchführung der Richtlinie 2007/2/EG des Europäischen Parlaments und des Rates hinsichtlich der Interoperabilität von Geodatensätzen und -diensten'])
       let $thenPropertyCount := count($typeFound/*[local-name()='specification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='date' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='Date' and namespace-uri()='http://www.isotc211.org/2005/gco' and text()='2010-12-08'])
       return 
       if ($ifPropertyCount gt 0) then 
         if ($thenPropertyCount eq 0) then 
           local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'Date', 'namespace': 'http://www.isotc211.org/2005/gco', 'expectedValue': '2010-12-08' })
         else ()
       else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID664605df-4305-42ec-96a9-f1534ad029b5">
          <label>Einschränkungen bei Objektarten</label>
          <description><![CDATA[Einschränkungen bei Objektarten]]></description>
          <parent ref="EID8306ed5f-7bc2-463e-823b-b40bf66af22d"/>
          <testSteps>
            <TestStep id="EID7d659716-2b15-4982-b9c0-efcac163299c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID86e9271a-02ad-4fd0-9cbc-c73de47c785d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID7d659716-2b15-4982-b9c0-efcac163299c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_QuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbdd30dee-eb6b-446c-ad8b-4a0015632265">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5e9e8569-7757-4392-9f05-db7b55360d84">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDbdd30dee-eb6b-446c-ad8b-4a0015632265"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_QuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2e4c7570-ad96-41e1-8e44-7011bcaa22c5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID741a6e7d-9103-427d-97c2-d5458d1c64bf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID2e4c7570-ad96-41e1-8e44-7011bcaa22c5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_QuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID695fb37d-32f3-4683-bb5b-34a0cbf9d7fd">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8ace871f-c680-4211-b8d7-95f36553e68f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID695fb37d-32f3-4683-bb5b-34a0cbf9d7fd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_QuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb1b3ba75-1cba-4715-9984-4a7ea13d329b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ApplicationSchemaInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1f927f65-5df7-4f39-9afa-61df2bbb2b6d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EIDb1b3ba75-1cba-4715-9984-4a7ea13d329b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ApplicationSchemaInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'name', 'localName': 'MD_ApplicationSchemaInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID903e7e12-40a0-45a0-8332-3ebe47358f9b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_PortrayalCatalogueReference' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID3248cc52-01f8-436d-9e78-6aa7b6e351d5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'portrayalCatalogueCitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID903e7e12-40a0-45a0-8332-3ebe47358f9b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_PortrayalCatalogueReference' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='portrayalCatalogueCitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_PortrayalCatalogueReference', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd4bf2bc6-e5e3-4cbb-b8ab-a6c82d3055ef">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_StandardOrderProcess' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID71f7cda2-83ef-4796-bdb1-5e2d9dd18108">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'plannedAvailableDateTime' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDd4bf2bc6-e5e3-4cbb-b8ab-a6c82d3055ef"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_StandardOrderProcess' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='plannedAvailableDateTime' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_StandardOrderProcess', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1ce324f5-67a2-4f83-9b73-b89c6a8697fa">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Constraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDafda6a85-4a5f-466a-b1cb-cfacd781c91b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID1ce324f5-67a2-4f83-9b73-b89c6a8697fa"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Constraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Constraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDca1c08f9-14df-4d38-9bdf-a7f2cc9f31ec">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Constraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID14b38488-0d9b-4c6f-94d6-64501e1a30c8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDca1c08f9-14df-4d38-9bdf-a7f2cc9f31ec"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Constraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'useLimitation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf4868d52-3a5c-41de-aa79-a98df3431176">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdf9a2bd7-b970-48c3-a282-0d7476cca0f5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDf4868d52-3a5c-41de-aa79-a98df3431176"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Citation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID91e8c8c7-a5a7-4baa-a61d-5ae237d50122">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb7514e89-d40c-4e25-a6e1-c94a69845497">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'presentationForm' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>modelHardcopy</li><li>tableDigital</li><li>modelDigital</li><li>profileDigital</li><li>profileHardcopy</li><li>imageHardcopy</li><li>documentHardcopy</li><li>documentDigital</li><li>videoDigital</li><li>mapHardcopy</li><li>tableHardcopy</li><li>mapDigital</li><li>imageDigital</li><li>videoHardcopy</li></ul>]]></description>
                  <parent ref="EID91e8c8c7-a5a7-4baa-a61d-5ae237d50122"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('modelHardcopy', 'tableDigital', 'modelDigital', 'profileDigital', 'profileHardcopy', 'imageHardcopy', 'documentHardcopy', 'documentDigital', 'videoDigital', 'mapHardcopy', 'tableHardcopy', 'mapDigital', 'imageDigital', 'videoHardcopy')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='presentationForm' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'presentationForm', 'localName': 'CI_Citation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdf2d77af-f6ae-4ff1-98b1-6eaf480a7e0b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Citation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID515fa0b3-2c6d-4ab3-8d4f-4844d735be87">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'series' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDdf2d77af-f6ae-4ff1-98b1-6eaf480a7e0b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_Citation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='series' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_Citation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc227e693-1f57-4e08-a5fa-b9b0e08762fd">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_MetadataExtensionInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf8f56c51-e2ff-4935-9453-cf9f1a3133f7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extensionOnLineResource' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDc227e693-1f57-4e08-a5fa-b9b0e08762fd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_MetadataExtensionInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='extensionOnLineResource' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_MetadataExtensionInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID93eeeba7-66f4-4b8c-b3c9-14727fa2c3f6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_MetadataExtensionInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7e6a6e72-f202-4e18-81b6-e1f1c197cdb2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extendedElementInformation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID93eeeba7-66f4-4b8c-b3c9-14727fa2c3f6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_MetadataExtensionInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='extendedElementInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_MetadataExtensionInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe90cc4e7-aa04-440d-b571-1c39dda9246f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ReferenceSystem' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID94fd1ac3-93b0-49af-892b-42290e5abe1f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'referenceSystemIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDe90cc4e7-aa04-440d-b571-1c39dda9246f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='referenceSystemIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_ReferenceSystem', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9270283f-0f0e-42f0-8aec-40b1fe7501d0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ReferenceSystem' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID418b1c02-0f3a-4de4-8467-e61024c19d65">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'referenceSystemIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID9270283f-0f0e-42f0-8aec-40b1fe7501d0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_ReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='referenceSystemIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'referenceSystemIdentifier', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6c47d94b-04e6-485d-9f89-92b9d0516400">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AbsoluteExternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID02334750-f434-478c-8275-22c16d484d17">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID6c47d94b-04e6-485d-9f89-92b9d0516400"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AbsoluteExternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID12469d2f-e22d-4fd9-afc8-532a9b758658">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AbsoluteExternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID78379886-e724-47ce-aca9-ce0a0e5b83c2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID12469d2f-e22d-4fd9-afc8-532a9b758658"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_AbsoluteExternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID396dab8e-ae2c-4f15-97dc-f2fd72164566">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AbsoluteExternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDce2969c7-3c3d-4231-a680-a0ab8f5123be">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID396dab8e-ae2c-4f15-97dc-f2fd72164566"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AbsoluteExternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID58214f2d-dff5-4614-9a1c-b5fc7f2d7f34">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AbsoluteExternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd18b0cc3-0acb-4b57-b914-012a734ac7a6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID58214f2d-dff5-4614-9a1c-b5fc7f2d7f34"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AbsoluteExternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AbsoluteExternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa38a018b-9dd3-47d3-ba49-7713946998f0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_AggregateInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0deab2ec-d3b3-4800-8897-7a0bd23a3298">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'associationType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>partOfSeamlessDatabase</li><li>crossReference</li><li>stereoMate</li><li>source</li><li>largerWorkCitation</li></ul>]]></description>
                  <parent ref="EIDa38a018b-9dd3-47d3-ba49-7713946998f0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('partOfSeamlessDatabase', 'crossReference', 'stereoMate', 'source', 'largerWorkCitation')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_AggregateInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='associationType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'associationType', 'localName': 'MD_AggregateInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb3c103f8-36a0-4621-98e4-74d08607bcc0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_AggregateInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID01dbe322-6a16-43b4-9832-9e089d9da840">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'initiativeType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>process</li><li>study</li><li>project</li><li>exercise</li><li>program</li><li>collection</li><li>trial</li><li>platform</li><li>mission</li><li>task</li><li>experiment</li><li>campaign</li><li>investigation</li><li>sensor</li><li>operation</li></ul>]]></description>
                  <parent ref="EIDb3c103f8-36a0-4621-98e4-74d08607bcc0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('process', 'study', 'project', 'exercise', 'program', 'collection', 'trial', 'platform', 'mission', 'task', 'experiment', 'campaign', 'investigation', 'sensor', 'operation')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_AggregateInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='initiativeType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'initiativeType', 'localName': 'MD_AggregateInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc5d48392-2a01-4eb3-9124-cd34ef20d3c8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_FormatConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID174eb4bf-3491-4ff2-bbea-9da7b4bc47e5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDc5d48392-2a01-4eb3-9124-cd34ef20d3c8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_FormatConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDe9225a43-8fb4-4823-8e41-2ce5b5533b68">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_FormatConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID48b5cd21-f8cd-4407-896c-02df24150bde">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDe9225a43-8fb4-4823-8e41-2ce5b5533b68"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_FormatConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID69df5ed2-6da7-4076-8a9b-0692bae3709c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_FormatConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID47c1f4f2-bdd2-4b3e-acc7-4e4c6cb45b09">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID69df5ed2-6da7-4076-8a9b-0692bae3709c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_FormatConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID20a92512-1f2c-41f0-8c7a-196d59c4cb68">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_FormatConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd8408595-78b4-45a2-bc58-622da9c69904">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID20a92512-1f2c-41f0-8c7a-196d59c4cb68"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_FormatConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_FormatConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb13f931a-8f6d-4df3-b42e-5cdd19f483ac">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_GeometricObjects' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5ee994dd-8e5c-4cb8-b5c6-0e33e0b2d6ce">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geometricObjectType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>solid</li><li>surface</li><li>curve</li><li>composite</li><li>complex</li><li>point</li></ul>]]></description>
                  <parent ref="EIDb13f931a-8f6d-4df3-b42e-5cdd19f483ac"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('solid', 'surface', 'curve', 'composite', 'complex', 'point')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_GeometricObjects' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='geometricObjectType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'geometricObjectType', 'localName': 'MD_GeometricObjects', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID77af8ddb-cb07-4cf3-9425-9fba4c5685bc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ThematicClassificationCorrectness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID37b5af9b-73d0-4011-a9be-9ceb21094410">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID77af8ddb-cb07-4cf3-9425-9fba4c5685bc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ThematicClassificationCorrectness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc1c3f62b-c5d0-4880-a112-8f193320560e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ThematicClassificationCorrectness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDaa56aeb6-0340-44d8-9e3a-cec88c745c4d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDc1c3f62b-c5d0-4880-a112-8f193320560e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_ThematicClassificationCorrectness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9c34251e-e9c5-42d6-92ab-355727e65986">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ThematicClassificationCorrectness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID20857cc1-a5d4-47d8-94e9-b8bee67126d1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID9c34251e-e9c5-42d6-92ab-355727e65986"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ThematicClassificationCorrectness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDcb47c430-1248-4424-bf51-2cce56dde9c7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ThematicClassificationCorrectness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID25e93854-4117-423e-acbe-4a2f9f053a3d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDcb47c430-1248-4424-bf51-2cce56dde9c7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ThematicClassificationCorrectness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ThematicClassificationCorrectness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDac282132-7e06-4fbc-a327-f273ec13969e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Medium' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfdf900d1-1a59-42dc-8878-51d06de4f6e7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EIDac282132-7e06-4fbc-a327-f273ec13969e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Medium' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'name', 'localName': 'MD_Medium', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc5957508-3432-4bd6-8399-ea145544ed01">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Medium' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDee1d9185-ff4f-4b3d-a71e-bd1cc07a2b0d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'mediumFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>iso9660RockRidge</li><li>iso9660AppleHFS</li><li>tar</li><li>highSierra</li><li>cpio</li><li>iso9660</li></ul>]]></description>
                  <parent ref="EIDc5957508-3432-4bd6-8399-ea145544ed01"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('iso9660RockRidge', 'iso9660AppleHFS', 'tar', 'highSierra', 'cpio', 'iso9660')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Medium' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='mediumFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'mediumFormat', 'localName': 'MD_Medium', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdd6bcea7-6e76-4307-b2f4-79d4d442522f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_VectorSpatialRepresentation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5f132fd2-57da-470f-863b-32779a04e1dd">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topologyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>topology1D</li><li>fullPlanarGraph</li><li>topology3D</li><li>fullSurfaceGraph</li><li>planarGraph</li><li>abstract</li><li>surfaceGraph</li><li>fullTopology3D</li><li>geometryOnly</li></ul>]]></description>
                  <parent ref="EIDdd6bcea7-6e76-4307-b2f4-79d4d442522f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('topology1D', 'fullPlanarGraph', 'topology3D', 'fullSurfaceGraph', 'planarGraph', 'abstract', 'surfaceGraph', 'fullTopology3D', 'geometryOnly')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_VectorSpatialRepresentation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='topologyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'topologyLevel', 'localName': 'MD_VectorSpatialRepresentation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2d954799-fe96-487e-bf75-9d367e79d1ad">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distributor' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbbce0474-4023-40dc-8b2b-e9d0ebd0173b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributorFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID2d954799-fe96-487e-bf75-9d367e79d1ad"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Distributor' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributorFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Distributor', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7d10e28a-f33a-4fe5-bf20-3c89356b1b24">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distributor' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0dcce382-cbbe-4ac4-adbf-e54f75a667e3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributorTransferOptions' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID7d10e28a-f33a-4fe5-bf20-3c89356b1b24"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Distributor' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributorTransferOptions' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Distributor', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8b3368da-1793-45d0-8c84-b4c600d786ad">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractDQ_Completeness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID954b9c36-aac7-4959-b7a9-aee252a8e2a2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID8b3368da-1793-45d0-8c84-b4c600d786ad"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractDQ_Completeness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'AbstractDQ_Completeness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8ebbbca8-22df-4168-a58c-57ff64f513c9">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractDQ_Completeness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe4e5b932-7417-4890-a9e4-2f8752452e6c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID8ebbbca8-22df-4168-a58c-57ff64f513c9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractDQ_Completeness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'AbstractDQ_Completeness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5c50cecb-6a8c-4263-8da2-0d84003d3427">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractDQ_Completeness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd165b5e2-ec20-4a22-8d5b-af9303570edf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID5c50cecb-6a8c-4263-8da2-0d84003d3427"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractDQ_Completeness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'AbstractDQ_Completeness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID212d0728-8929-494d-aed3-ab027354f679">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractDQ_Completeness' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc1bb8444-ace1-4030-b81b-30a80a94933b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID212d0728-8929-494d-aed3-ab027354f679"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractDQ_Completeness' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'AbstractDQ_Completeness', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5a8c73e4-a203-4d8c-bf9e-5310d221e797">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID3e75feb5-c9e5-4f2c-ae56-298d3e33f11c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sequenceIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID5a8c73e4-a203-4d8c-bf9e-5310d221e797"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sequenceIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3c94db27-5de2-4637-a15d-7075153d51ed">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID17185130-9a77-4607-b7af-63e03759e4eb">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptor' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID3c94db27-5de2-4637-a15d-7075153d51ed"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='descriptor' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1a08bb93-8b19-4e9b-984b-5756c1d86a39">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID458e71da-93c0-412a-a8f2-1500fbdace31">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'maxValue' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID1a08bb93-8b19-4e9b-984b-5756c1d86a39"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='maxValue' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDae0c8853-cebd-43ee-805f-11427c524dbe">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID65fec265-99c3-4036-86d4-4f5f1d4bdbbe">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'minValue' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDae0c8853-cebd-43ee-805f-11427c524dbe"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='minValue' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd94a31ab-4277-4f1d-85af-22c41a1bb047">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID931720e2-0e32-4509-8028-0cf3b834359f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'units' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDd94a31ab-4277-4f1d-85af-22c41a1bb047"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='units' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID48a671c0-2274-4939-b411-4f53a29501ec">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0e8ad65f-48e0-4eda-80c2-fc9d8183c625">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'peakResponse' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID48a671c0-2274-4939-b411-4f53a29501ec"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='peakResponse' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf2e8880e-5298-485f-9742-60cc6e5ca394">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1f74fe75-b7c7-457a-8472-bb4864b188eb">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'bitsPerValue' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDf2e8880e-5298-485f-9742-60cc6e5ca394"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='bitsPerValue' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9d04b412-6dd7-467f-9cd9-f262ebf2567a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc6ed1b01-346c-4633-92b1-ec1bc5d06645">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'toneGradation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID9d04b412-6dd7-467f-9cd9-f262ebf2567a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='toneGradation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5706ac2a-aa99-4674-b701-e9caff1282d7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDba1a4ce4-08af-4ce4-a280-2dfcc7d37911">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'scaleFactor' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID5706ac2a-aa99-4674-b701-e9caff1282d7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='scaleFactor' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb13e1b68-6a02-45b2-a045-4a36897971ea">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Band' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0ed5cb53-f4ee-4af8-bcb0-24611afc785e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'offset' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDb13e1b68-6a02-45b2-a045-4a36897971ea"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Band' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='offset' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Band', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDec9bebf3-5e61-4bdf-8c4f-4642abbc481d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_CoverageDescription' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5fba10b2-2d63-4909-94da-3a0ae72aa7c4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contentType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>thematicClassification</li><li>image</li><li>physicalMeasurement</li></ul>]]></description>
                  <parent ref="EIDec9bebf3-5e61-4bdf-8c4f-4642abbc481d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('thematicClassification', 'image', 'physicalMeasurement')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_CoverageDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='contentType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'contentType', 'localName': 'MD_CoverageDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID892cf684-e14c-44de-81f6-b818824e2adf">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_FeatureCatalogueDescription' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0ce8a0d8-2962-4996-94c9-eec8f330059c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID892cf684-e14c-44de-81f6-b818824e2adf"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_FeatureCatalogueDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4bb768e5-7daf-4301-86cd-24c574be73d8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_FeatureCatalogueDescription' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe0ac2946-165a-4d60-8118-4b35584c3457">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID4bb768e5-7daf-4301-86cd-24c574be73d8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_FeatureCatalogueDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'language', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdc9fb521-d521-4f18-b208-3e4c3c3912fb">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_OnlineResource' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID897f357e-2518-4a98-87b9-865c8fcb37e9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'function' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>download</li><li>information</li><li>offlineAccess</li><li>order</li><li>search</li></ul>]]></description>
                  <parent ref="EIDdc9fb521-d521-4f18-b208-3e4c3c3912fb"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('download', 'information', 'offlineAccess', 'order', 'search')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_OnlineResource' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='function' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'function', 'localName': 'CI_OnlineResource', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3b3d9f4e-b053-44dd-bd98-1fe1cfa340a7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_OnlineResource' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc71dc777-d3f7-4f8e-a3d4-2e1ba7bb7506">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EID3b3d9f4e-b053-44dd-bd98-1fe1cfa340a7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_OnlineResource' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'name', 'localName': 'CI_OnlineResource', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID417f9fcf-13dc-49df-9519-3c1e60639fe6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID34b02804-592c-47e5-96cb-f3ff1d08d745">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>attributeType</li><li>model</li><li>collectionHardware</li><li>collectionSession</li><li>feature</li><li>featureType</li><li>dimensionGroup</li><li>nonGeographicDataset</li><li>propertyType</li><li>dataset</li><li>series</li><li>attribute</li><li>software</li><li>service</li><li>tile</li><li>fieldSession</li></ul>]]></description>
                  <parent ref="EID417f9fcf-13dc-49df-9519-3c1e60639fe6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('attributeType', 'model', 'collectionHardware', 'collectionSession', 'feature', 'featureType', 'dimensionGroup', 'nonGeographicDataset', 'propertyType', 'dataset', 'series', 'attribute', 'software', 'service', 'tile', 'fieldSession')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'hierarchyLevel', 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID388f016b-542c-4b0d-bd1f-2a63b3cdec9c">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5005324e-0c91-4990-9b6c-a586dfae5a7f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID388f016b-542c-4b0d-bd1f-2a63b3cdec9c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1f1b06b8-f971-4406-a1c0-80bd6f53675d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7164e73d-9f68-4310-8c41-bc2ff5150957">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID1f1b06b8-f971-4406-a1c0-80bd6f53675d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID413e50ec-774b-4bfb-a1d3-7352cfef0338">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID172b6a43-a08d-4466-9fa0-0803d2ad810e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID413e50ec-774b-4bfb-a1d3-7352cfef0338"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='fileIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'fileIdentifier', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID19737f81-9611-47ea-bb12-47af107d2081">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1010d11e-46b2-41cd-ac1d-fd43f2362417">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID19737f81-9611-47ea-bb12-47af107d2081"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6438cd91-aa0d-4046-8b26-673e157d09fc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd4eb99fc-22f9-429f-92a7-fdf9a784215a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'language' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID6438cd91-aa0d-4046-8b26-673e157d09fc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='language' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'language', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4d344249-2bbc-43aa-b20e-27d6fbafe2a4">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2021d5bc-6cce-4aeb-9c00-980fc125399e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EID4d344249-2bbc-43aa-b20e-27d6fbafe2a4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'characterSet', 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbc8bfa83-ce8b-40d1-a958-9ca516d6fa67">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID538d659f-ae0c-4cd9-8c3e-0437a9dace94">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDbc8bfa83-ce8b-40d1-a958-9ca516d6fa67"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6b912d89-8960-43f5-a62d-72373ee3a844">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc420d949-61ac-4902-ac70-048c646a6098">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID6b912d89-8960-43f5-a62d-72373ee3a844"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'characterSet', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5a8bc779-a3ad-41c5-bd39-1e76821f7f9d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc6da30d8-b362-4b69-b32d-9b357944e720">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID5a8bc779-a3ad-41c5-bd39-1e76821f7f9d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID53915583-003a-4da7-a826-61f22800b20d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2daeff0f-85b0-476b-a24d-22b355422a06">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevel' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID53915583-003a-4da7-a826-61f22800b20d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='hierarchyLevel' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'hierarchyLevel', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0eb3222b-5eae-43f9-8bf3-a366eda5dbf8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc54c231b-0ec0-483a-998f-dabe0506f8de">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'hierarchyLevelName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 1]]></description>
                  <parent ref="EID0eb3222b-5eae-43f9-8bf3-a366eda5dbf8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='hierarchyLevelName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7fef5dfa-ba42-44e8-b6a8-c4a10ecdb1b6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7ce18921-0f40-4671-83a9-27c011e10acf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contact' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID7fef5dfa-ba42-44e8-b6a8-c4a10ecdb1b6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8f053f3d-5425-4a6a-83d5-909c6c1b9925">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8a93453b-ac2c-4b7d-b224-ab63372213ae">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID8f053f3d-5425-4a6a-83d5-909c6c1b9925"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='metadataStandardName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd356a72f-cc7a-4b39-917a-c3a59e24b73e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf7bd9a09-977b-42db-90f2-f890c7d5d70c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardName' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDd356a72f-cc7a-4b39-917a-c3a59e24b73e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='metadataStandardName' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'metadataStandardName', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf0d83480-fe62-490a-91d0-f62f756de242">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID20f55981-51f6-4aca-97c1-3090b541435a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardVersion' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDf0d83480-fe62-490a-91d0-f62f756de242"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='metadataStandardVersion' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9fd081a3-94c6-4a5b-901f-b6095342c322">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe86d626f-afd4-49bc-9888-de2a07c48ac9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'metadataStandardVersion' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID9fd081a3-94c6-4a5b-901f-b6095342c322"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='metadataStandardVersion' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'metadataStandardVersion', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa5dda7f4-360f-473f-8685-bbeea28528d5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9dcabfb9-42c5-4cbf-8763-f4b04574864f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'identificationInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDa5dda7f4-360f-473f-8685-bbeea28528d5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='identificationInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID511e03b2-9822-49b2-8625-d41f9121edb5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID83784f8e-0f70-4543-8699-227cc244db15">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID511e03b2-9822-49b2-8625-d41f9121edb5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributionInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID820309a7-d76d-4efc-8fd1-c0a07ccbfebc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa8d49f78-512b-4f43-a996-760a34920e4e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID820309a7-d76d-4efc-8fd1-c0a07ccbfebc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distributionInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'distributionInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5973aecf-4c7e-4b54-96cb-e9350e3fdd3d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID839bbc03-a5d6-42e8-a194-198be58c8e62">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataQualityInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID5973aecf-4c7e-4b54-96cb-e9350e3fdd3d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa86e3f03-1ba0-4608-a2d5-c67903317de6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID29544e2d-60c7-40aa-a00e-9ff254d22c48">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataQualityInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDa86e3f03-1ba0-4608-a2d5-c67903317de6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='dataQualityInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'dataQualityInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3fff14d7-57e6-4cc2-a658-5b42c0d522e7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Metadata' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa07ecca2-cd8e-4200-82c5-6235b256c5f7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'series' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID3fff14d7-57e6-4cc2-a658-5b42c0d522e7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Metadata' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='series' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Metadata', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID43354f22-dc33-413c-92db-4f4e3bf794a6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_MaintenanceInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0631dd36-fce3-46a3-84ba-71d66f4dd6a1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'maintenanceAndUpdateFrequency' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>asNeeded</li><li>biannually</li><li>fortnightly</li><li>daily</li><li>monthly</li><li>irregular</li><li>notPlanned</li><li>quarterly</li><li>continual</li><li>weekly</li><li>annually</li><li>unknown</li></ul>]]></description>
                  <parent ref="EID43354f22-dc33-413c-92db-4f4e3bf794a6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('asNeeded', 'biannually', 'fortnightly', 'daily', 'monthly', 'irregular', 'notPlanned', 'quarterly', 'continual', 'weekly', 'annually', 'unknown')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_MaintenanceInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='maintenanceAndUpdateFrequency' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'maintenanceAndUpdateFrequency', 'localName': 'MD_MaintenanceInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8a7577e5-1246-4189-be6a-097928e92fc0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_MaintenanceInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf79ddcb5-0d15-4946-a349-f355f7cb4957">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'updateScope' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>software</li><li>nonGeographicDataset</li><li>collectionHardware</li><li>fieldSession</li><li>feature</li><li>dimensionGroup</li><li>collectionSession</li><li>attributeType</li><li>series</li><li>service</li><li>propertyType</li><li>featureType</li><li>tile</li><li>model</li><li>attribute</li><li>dataset</li></ul>]]></description>
                  <parent ref="EID8a7577e5-1246-4189-be6a-097928e92fc0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('software', 'nonGeographicDataset', 'collectionHardware', 'fieldSession', 'feature', 'dimensionGroup', 'collectionSession', 'attributeType', 'series', 'service', 'propertyType', 'featureType', 'tile', 'model', 'attribute', 'dataset')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_MaintenanceInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='updateScope' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'updateScope', 'localName': 'MD_MaintenanceInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID853fcd79-11b4-4ce3-b525-2a0c38f0a39e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_MaintenanceInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID69959c68-4400-4599-9909-8dac7c0d5f9f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contact' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID853fcd79-11b4-4ce3-b525-2a0c38f0a39e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_MaintenanceInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_MaintenanceInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4ff67fea-43ce-44d5-b889-33a25ad0a4a3">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Georectified' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDba07a8cd-dc90-4ac3-bd09-2e06819249cc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'cellGeometry' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>area</li><li>point</li></ul>]]></description>
                  <parent ref="EID4ff67fea-43ce-44d5-b889-33a25ad0a4a3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('area', 'point')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Georectified' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='cellGeometry' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'cellGeometry', 'localName': 'MD_Georectified', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3cb922b8-f4ed-42c0-88e8-a0bbc88ec7f9">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID13e3628b-2749-40a6-94de-4783a3cc2966">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'statement' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID3cb922b8-f4ed-42c0-88e8-a0bbc88ec7f9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='statement' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Lineage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID20220284-28f2-4a7e-b588-637318eb592e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9831eb15-d002-435b-ad2e-33ec4cd73c7b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'statement' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID20220284-28f2-4a7e-b588-637318eb592e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='statement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'statement', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc012321c-a449-493b-95cc-7d8613f145a8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9e6cbb78-ffaa-43fe-8d8a-4774d0e8d8d0">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'source' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0]]></description>
                  <parent ref="EIDc012321c-a449-493b-95cc-7d8613f145a8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='source' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Lineage', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6fde33da-8f72-4084-830c-6ff43ce90cd2">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8b967d63-a1e0-4737-a6a3-d3488c9a2c49">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'LI_Lineage' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID6fde33da-8f72-4084-830c-6ff43ce90cd2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='LI_Lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'LI_Lineage', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID45d84b59-eccf-4999-bd28-24f6c3aeaea6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_RangeDimension' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID16d23d57-a92b-48f4-9a39-a65d90bac8f0">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sequenceIdentifier' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID45d84b59-eccf-4999-bd28-24f6c3aeaea6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_RangeDimension' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sequenceIdentifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_RangeDimension', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDddbde4e0-28d5-40ef-a64b-89e89d2c4332">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_RangeDimension' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5d858197-18c2-43d0-9173-6e53990d1663">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptor' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDddbde4e0-28d5-40ef-a64b-89e89d2c4332"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_RangeDimension' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='descriptor' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_RangeDimension', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0b143eee-a3eb-429a-bb70-121a86ab4715">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Dimension' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa829625a-91af-4f16-b384-d1828e9c13d2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dimensionName' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>line</li><li>column</li><li>crossTrack</li><li>vertical</li><li>row</li><li>time</li><li>track</li><li>sample</li></ul>]]></description>
                  <parent ref="EID0b143eee-a3eb-429a-bb70-121a86ab4715"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('line', 'column', 'crossTrack', 'vertical', 'row', 'time', 'track', 'sample')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Dimension' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dimensionName' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'dimensionName', 'localName': 'MD_Dimension', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID63210b8f-c349-48e6-a542-382a02c568f7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_PlatformSpecificServiceSpecification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbcdc88e8-fdb8-4aa2-b97e-677eb0b8f3c4">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'DCP' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EID63210b8f-c349-48e6-a542-382a02c568f7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='SV_PlatformSpecificServiceSpecification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='DCP' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'DCP', 'localName': 'SV_PlatformSpecificServiceSpecification', 'namespace': 'http://www.isotc211.org/2005/srv', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6763aac2-32ce-4caa-b992-6d73c936e16c">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdd076e85-2f67-4b35-9664-d1be86726ea5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID6763aac2-32ce-4caa-b992-6d73c936e16c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Keywords', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0706b7a2-a6b3-4e56-b4a5-adc44b6bab93">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Keywords' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe877c9a2-ff5b-456f-84f9-dc04dc43d902">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>theme</li><li>discipline</li><li>place</li><li>temporal</li><li>stratum</li></ul>]]></description>
                  <parent ref="EID0706b7a2-a6b3-4e56-b4a5-adc44b6bab93"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('theme', 'discipline', 'place', 'temporal', 'stratum')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Keywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'type', 'localName': 'MD_Keywords', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf25d0d9e-35c2-4d7d-bab7-3db9ac07dc4b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_GridSpatialRepresentation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDbc3636d1-fac3-43f6-86d9-3c3b20232413">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'cellGeometry' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>area</li><li>point</li></ul>]]></description>
                  <parent ref="EIDf25d0d9e-35c2-4d7d-bab7-3db9ac07dc4b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('area', 'point')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_GridSpatialRepresentation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='cellGeometry' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'cellGeometry', 'localName': 'MD_GridSpatialRepresentation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd18dcef0-d768-49f3-81c0-c6d1d25b4021">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AccuracyOfATimeMeasurement' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1ce08607-9305-4466-b373-9cd5730bae56">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDd18dcef0-d768-49f3-81c0-c6d1d25b4021"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AccuracyOfATimeMeasurement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID66f97bad-c78a-44c4-a00c-a8a3a7a90f10">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AccuracyOfATimeMeasurement' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd3b10cb5-bb7e-4aa7-8401-339b94ceecdc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID66f97bad-c78a-44c4-a00c-a8a3a7a90f10"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_AccuracyOfATimeMeasurement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID19651c5b-9088-48e4-9419-5dbbc77ecba4">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AccuracyOfATimeMeasurement' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4878aa6a-f2eb-4c81-958b-226f43f9335f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID19651c5b-9088-48e4-9419-5dbbc77ecba4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AccuracyOfATimeMeasurement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDee85f656-ea12-432e-986a-2bf23f410fc3">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_AccuracyOfATimeMeasurement' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID914c70cb-c531-4739-bb2b-a5232de3dbd9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDee85f656-ea12-432e-986a-2bf23f410fc3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_AccuracyOfATimeMeasurement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_AccuracyOfATimeMeasurement', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd6fdd01b-8f81-45b6-bada-8b6427eab870">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1447d11e-d6a1-4722-9ebc-e6216527f0cc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDd6fdd01b-8f81-45b6-bada-8b6427eab870"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_Format' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Format', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDfc076ceb-5f0c-4dc3-b892-9011036d31e7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID29e683f4-f141-459f-b1d8-91ae97cbec27">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EIDfc076ceb-5f0c-4dc3-b892-9011036d31e7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Format' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'name', 'localName': 'MD_Format', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID57d33b6f-da95-4ae5-8560-dd1c72ef4e1c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Format' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID07d97400-6bfe-414a-b8fe-666edde2c03e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'version' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID57d33b6f-da95-4ae5-8560-dd1c72ef4e1c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Format' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='version' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Format', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd06f9406-8583-411f-84c6-6d036d1935f6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_OperationMetadata' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID966a31c4-4a4a-463c-ade1-72a8903f31a6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'DCP' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EIDd06f9406-8583-411f-84c6-6d036d1935f6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='SV_OperationMetadata' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='DCP' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'DCP', 'localName': 'SV_OperationMetadata', 'namespace': 'http://www.isotc211.org/2005/srv', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID6950d206-c92d-4ea1-a2b6-1676c48e10a3">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe29fed70-946e-46d8-9136-d86757d80ac3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'electronicMailAddress' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID6950d206-c92d-4ea1-a2b6-1676c48e10a3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='electronicMailAddress' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_Address', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID098f96f1-ffe3-4914-929b-e3d11cb93b47">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4d1c1125-fe12-4411-be35-58799fdf4acc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'electronicMailAddress' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID098f96f1-ffe3-4914-929b-e3d11cb93b47"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='electronicMailAddress' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'electronicMailAddress', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID68d735a5-00c1-44fe-a66a-fd847beab83d">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb99c99f0-e5fe-4179-b1bd-bfa812de9aac">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Address' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID68d735a5-00c1-44fe-a66a-fd847beab83d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='CI_Address' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Address', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID96be5253-9860-4b5d-adac-3cf8bce01d4a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID44f62b99-95d9-40b6-9979-9191ddb9c1f1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID96be5253-9860-4b5d-adac-3cf8bce01d4a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID29373bb2-3464-4e21-9daf-c9fb2225f356">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5ea0aabe-fddd-4ed7-b929-1c56e296fc72">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID29373bb2-3464-4e21-9daf-c9fb2225f356"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'useLimitation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2d5a89e5-dfb3-42fe-a8a0-e9391d6cd22d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4e975f16-5462-49fb-abc7-19ac15cede60">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'classification' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>unclassified</li><li>restricted</li><li>secret</li><li>topSecret</li><li>confidential</li></ul>]]></description>
                  <parent ref="EID2d5a89e5-dfb3-42fe-a8a0-e9391d6cd22d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('unclassified', 'restricted', 'secret', 'topSecret', 'confidential')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='classification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'classification', 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf7916196-a0eb-44fd-b2c1-dcf92393659e">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID3aa690b4-64dc-48a9-9ffd-7a4b5cf45256">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_SecurityConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDf7916196-a0eb-44fd-b2c1-dcf92393659e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_SecurityConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_SecurityConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa4eeaee0-ea4b-44ef-aa9d-dc148da520f5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ImageDescription' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID75d7eb30-f342-4a50-a1ce-241481e9885c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contentType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>thematicClassification</li><li>image</li><li>physicalMeasurement</li></ul>]]></description>
                  <parent ref="EIDa4eeaee0-ea4b-44ef-aa9d-dc148da520f5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('thematicClassification', 'image', 'physicalMeasurement')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ImageDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='contentType' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'contentType', 'localName': 'MD_ImageDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd8265bb7-5a75-4e58-be10-34df3b6fb20c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ImageDescription' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID818363e6-0fa7-4986-a133-e36594517185">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'imagingCondition' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>cloud</li><li>rain</li><li>semiDarkness</li><li>shadow</li><li>heavySmokeOrDust</li><li>terrainMasking</li><li>snow</li><li>night</li><li>degradingObliquity</li><li>blurredImage</li><li>fog</li></ul>]]></description>
                  <parent ref="EIDd8265bb7-5a75-4e58-be10-34df3b6fb20c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('cloud', 'rain', 'semiDarkness', 'shadow', 'heavySmokeOrDust', 'terrainMasking', 'snow', 'night', 'degradingObliquity', 'blurredImage', 'fog')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ImageDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='imagingCondition' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'imagingCondition', 'localName': 'MD_ImageDescription', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9aa933ba-059e-4f5d-9fb1-d8bac5c36c65">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ExtendedElementInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID404ee5b7-641a-4e02-9051-9cf9bdaa562a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'name' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>3580Cartridge</li><li>5quarterInchFloppy</li><li>4mmCartridgeTape</li><li>dvdRom</li><li>cdRom</li><li>telephoneLink</li><li>8mmCartridgeTape</li><li>onLine</li><li>hardcopy</li><li>7trackTape</li><li>dvd</li><li>3480Cartridge</li><li>3halfInchFloppy</li><li>9trackType</li><li>1quarterInchCartridgeTape</li><li>satellite</li><li>digitalLinearTape</li><li>3490Cartridge</li></ul>]]></description>
                  <parent ref="EID9aa933ba-059e-4f5d-9fb1-d8bac5c36c65"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('3580Cartridge', '5quarterInchFloppy', '4mmCartridgeTape', 'dvdRom', 'cdRom', 'telephoneLink', '8mmCartridgeTape', 'onLine', 'hardcopy', '7trackTape', 'dvd', '3480Cartridge', '3halfInchFloppy', '9trackType', '1quarterInchCartridgeTape', 'satellite', 'digitalLinearTape', '3490Cartridge')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ExtendedElementInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='name' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'name', 'localName': 'MD_ExtendedElementInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDffc55856-9511-4b09-82ea-54bfd0c272ea">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_ExtendedElementInformation' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID74d3e708-ddcc-4529-b310-833870346bea">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dataType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>abstractClass</li><li>codelist</li><li>metaClass</li><li>characterString</li><li>association</li><li>integer</li><li>aggregateClass</li><li>datatypeClass</li><li>interfaceClass</li><li>unionClass</li><li>codelistElement</li><li>typeClass</li><li>enumeration</li><li>class</li><li>specifiedClass</li></ul>]]></description>
                  <parent ref="EIDffc55856-9511-4b09-82ea-54bfd0c272ea"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('abstractClass', 'codelist', 'metaClass', 'characterString', 'association', 'integer', 'aggregateClass', 'datatypeClass', 'interfaceClass', 'unionClass', 'codelistElement', 'typeClass', 'enumeration', 'class', 'specifiedClass')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_ExtendedElementInformation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dataType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'dataType', 'localName': 'MD_ExtendedElementInformation', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0c838e9d-2156-4cc2-8623-2ce00d63ab75">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalValidity' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID2f8cee27-3937-4a9f-97c1-730bc691cd8b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID0c838e9d-2156-4cc2-8623-2ce00d63ab75"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalValidity', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID8a772e10-31be-4e48-8cb9-2ae04b5140f8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalValidity' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID246413d0-b5f5-4297-8e85-e2d29c506563">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID8a772e10-31be-4e48-8cb9-2ae04b5140f8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_TemporalValidity', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID185c6407-84ae-4bad-901a-ccad07effb29">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalValidity' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID765b7b29-e84f-43ca-adf1-c26567014525">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID185c6407-84ae-4bad-901a-ccad07effb29"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalValidity', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4177d263-a2ca-46e1-9122-3e67752fb007">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalValidity' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0321e719-a712-421e-a6d1-45cc0b8b0f17">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID4177d263-a2ca-46e1-9122-3e67752fb007"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalValidity' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalValidity', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDec2e4a36-7384-4cba-b22f-99302d05ad94">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractMD_Identification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfb10196b-7d2a-4b3b-923e-af8cac726220">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'status' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>planned</li><li>underDevelopment</li><li>historicalArchive</li><li>obsolete</li><li>onGoing</li><li>required</li><li>completed</li></ul>]]></description>
                  <parent ref="EIDec2e4a36-7384-4cba-b22f-99302d05ad94"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('planned', 'underDevelopment', 'historicalArchive', 'obsolete', 'onGoing', 'required', 'completed')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractMD_Identification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='status' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'status', 'localName': 'AbstractMD_Identification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1b061cd5-de80-4a33-a771-1a81a13e3cd9">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_ProcessStep' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID75769a96-abf9-40e7-8d6b-cdfa5af8da76">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'rationale' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 1]]></description>
                  <parent ref="EID1b061cd5-de80-4a33-a771-1a81a13e3cd9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_ProcessStep' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='rationale' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_ProcessStep', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID25879fbc-ae98-490c-8cc7-7b00576f2116">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_ProcessStep' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDafc4db15-c722-4b50-8dc4-ce49d17e9fb7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'source' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0]]></description>
                  <parent ref="EID25879fbc-ae98-490c-8cc7-7b00576f2116"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_ProcessStep' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='source' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_ProcessStep', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID704e7d20-803a-41c0-b8bd-6285229cd8f5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd4c012bd-db7c-484a-af1c-048aab3f96f6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'languageCode' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>French</li><li>English</li></ul>]]></description>
                  <parent ref="EID704e7d20-803a-41c0-b8bd-6285229cd8f5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('French', 'English')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='languageCode' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'languageCode', 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb8735dfc-c308-49b5-bb07-207cbf0ac984">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0b41c20a-6ddb-4363-8bdd-62160c931c9c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'country' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>United Kingdom</li><li>France</li></ul>]]></description>
                  <parent ref="EIDb8735dfc-c308-49b5-bb07-207cbf0ac984"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('United Kingdom', 'France')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='country' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'country', 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1f128ff3-dbe9-4666-852f-697a5d5660c2">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'PT_Locale' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0d5db336-fd35-4355-ae28-b1266da0bb83">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterEncoding' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>utf8</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EID1f128ff3-dbe9-4666-852f-697a5d5660c2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'utf8', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='PT_Locale' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterEncoding' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'characterEncoding', 'localName': 'PT_Locale', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa6418bea-d9c2-4066-b7fe-4b6385f973ca">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0fb3ad76-0c0d-4c5f-adec-de26a5f46ff7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDa6418bea-d9c2-4066-b7fe-4b6385f973ca"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_Distribution', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID38918306-8273-4396-a554-52adccf4b797">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcf76e1ea-7ee1-4432-b588-85cf60a46e9e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID38918306-8273-4396-a554-52adccf4b797"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='distributionFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_Distribution', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbcd22bf5-38f1-467b-b199-13618fcfdeb6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Distribution' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa28c935d-5227-414f-ac37-dc2362659d37">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'distributionFormat' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDbcd22bf5-38f1-467b-b199-13618fcfdeb6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_Distribution' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='distributionFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'distributionFormat', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdc37ff90-fe33-4fc3-8089-fdbed7a826dd">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessCommission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7e7df71c-85a7-4072-a29b-4c3126d759e5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDdc37ff90-fe33-4fc3-8089-fdbed7a826dd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessCommission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDaa963056-118d-4b37-8700-a23145f1ffd1">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessCommission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe5686cf5-08fb-499d-a857-6525ffad829b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDaa963056-118d-4b37-8700-a23145f1ffd1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_CompletenessCommission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID689dad05-2d45-4c61-bd37-cdbf5eea7e2d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessCommission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID56d231d2-f422-4c06-aa15-c766fc2fec3e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID689dad05-2d45-4c61-bd37-cdbf5eea7e2d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessCommission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb5cc1f3e-fe3d-48eb-b54c-8f0a7fcc71eb">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessCommission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4c6f2bb8-0c1f-4e26-91f3-b4d77c538899">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDb5cc1f3e-fe3d-48eb-b54c-8f0a7fcc71eb"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessCommission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessCommission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID933e85e4-4b82-414e-902f-3ff900782317">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_ServiceIdentification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb6792e29-3e83-4cc1-832a-f8d7fc7a3b61">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'couplingType' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>loose</li><li>mixed</li><li>tight</li></ul>]]></description>
                  <parent ref="EID933e85e4-4b82-414e-902f-3ff900782317"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('loose', 'mixed', 'tight')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='SV_ServiceIdentification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='couplingType' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'couplingType', 'localName': 'SV_ServiceIdentification', 'namespace': 'http://www.isotc211.org/2005/srv', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5a1370a3-fe38-4c1d-8181-160f124f424f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Date' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID22ccc9d1-7017-494b-9eaa-b6ceaef99853">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'dateType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>publication</li><li>creation</li><li>revision</li></ul>]]></description>
                  <parent ref="EID5a1370a3-fe38-4c1d-8181-160f124f424f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('publication', 'creation', 'revision')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='dateType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'dateType', 'localName': 'CI_Date', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID30b67b1e-89df-48dd-994c-d5e0722f170c">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Date' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4d9eb04c-b726-4930-ae18-442d0a545a5d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Date' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID30b67b1e-89df-48dd-994c-d5e0722f170c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='CI_Date' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Date', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID21be2634-6c9f-4451-ab88-6fa2ac3992bc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Source' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1bea3c12-13cf-4a7a-ab7f-e6332d79c5c3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sourceReferenceSystem' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID21be2634-6c9f-4451-ab88-6fa2ac3992bc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Source' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sourceReferenceSystem' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Source', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc21dd0c2-a488-4a32-aa84-8233a85918a7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Source' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID60591edc-6dc2-48ce-8f40-421a953f804f">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sourceCitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDc21dd0c2-a488-4a32-aa84-8233a85918a7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Source' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sourceCitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Source', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf2145296-2689-471b-925a-f18483cb7982">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Source' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0d8d346a-22bd-423c-ae7c-374fdccfa789">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sourceExtent' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDf2145296-2689-471b-925a-f18483cb7982"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Source' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sourceExtent' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Source', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID37cb6143-1a09-4fd8-bc5e-69f46f8a6d05">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'LI_Source' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID25ea5c35-9a05-490b-ae4d-a2b3026ccabc">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'sourceStep' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID37cb6143-1a09-4fd8-bc5e-69f46f8a6d05"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='LI_Source' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='sourceStep' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'LI_Source', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2c3561fc-5d33-453c-9018-6eae0ea57370">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1e52b97d-e0ec-4923-9d6a-b95078f4bfb1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geographicElement' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID2c3561fc-5d33-453c-9018-6eae0ea57370"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='geographicElement' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'EX_Extent', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID83979b39-8f07-444b-ab39-2d479ae191fb">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID444c0803-04f3-42f7-af57-9d1cc62b63b1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'geographicElement' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID83979b39-8f07-444b-ab39-2d479ae191fb"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='geographicElement' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'geographicElement', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID011344fe-90f8-48e1-9288-7c4e657c8cc2">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfde7b11e-5eb3-4a44-bc3d-82ce08a5c0d6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'EX_Extent' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID011344fe-90f8-48e1-9288-7c4e657c8cc2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='EX_Extent' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'EX_Extent', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID99aa2be5-1fff-49d0-89de-86e4f047c8a4">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TopologicalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9297843b-a42a-49bc-bfc2-918a8a965fd5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID99aa2be5-1fff-49d0-89de-86e4f047c8a4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TopologicalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa984e3cd-85d1-49c5-9ec7-ed13b7992962">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TopologicalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4e868faf-0eec-4225-b319-d9cb422f8085">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDa984e3cd-85d1-49c5-9ec7-ed13b7992962"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_TopologicalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbf8a90b1-62f9-40e7-91c0-4c7a4adf3de5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TopologicalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID95b69601-6d39-432c-aa73-ec73db1b8840">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDbf8a90b1-62f9-40e7-91c0-4c7a4adf3de5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TopologicalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2c9af688-7b75-40a0-bff2-64cc996e2974">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TopologicalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6176270e-a1e3-4e91-92be-e975d979b052">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID2c9af688-7b75-40a0-bff2-64cc996e2974"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TopologicalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TopologicalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID222e5628-d42e-4d53-bfb7-95f472e03ba7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'RS_Identifier' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDec10ab30-001b-4c92-a734-e13febd271d3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'version' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID222e5628-d42e-4d53-bfb7-95f472e03ba7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='RS_Identifier' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='version' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'RS_Identifier', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf803e997-c58e-4b4e-8b22-f493ff2a92af">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_GriddedDataPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID20c29380-53b9-4e82-8240-f11a08b9e270">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDf803e997-c58e-4b4e-8b22-f493ff2a92af"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_GriddedDataPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID73ccad3f-cfbe-4cba-a350-058858c7dddd">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_GriddedDataPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDdf36b760-128c-41de-bfe5-70e19adcd660">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID73ccad3f-cfbe-4cba-a350-058858c7dddd"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_GriddedDataPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5fa1e5a5-0818-435e-824a-696eeb58dd70">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_GriddedDataPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf0eba9eb-e123-45ce-b318-a357c5881850">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID5fa1e5a5-0818-435e-824a-696eeb58dd70"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_GriddedDataPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID310a2812-576b-40f4-95b5-8c0a083becc2">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_GriddedDataPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9ba83ecb-3dda-456d-becd-b0010bd1cd7a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID310a2812-576b-40f4-95b5-8c0a083becc2"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_GriddedDataPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_GriddedDataPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb24a80e7-c73b-4ce3-bba2-6195b72cfc17">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4ebcf3e5-74da-481d-bc2b-d9d2eb299e7d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDb24a80e7-c73b-4ce3-bba2-6195b72cfc17"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID0585892b-f63b-4ace-a9d9-54743cc86a48">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID248a4a6b-6eac-4709-9f4d-f46566321a55">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID0585892b-f63b-4ace-a9d9-54743cc86a48"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_TemporalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID04464889-0208-4aa9-904b-2088dd7fa49c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8b1398df-fcef-4241-ad99-a6c9c398eab6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID04464889-0208-4aa9-904b-2088dd7fa49c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa0646694-831a-4944-a5a6-9a6255252c69">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_TemporalConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd1a7daf4-626d-4a89-8d35-ffacdfc4e683">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDa0646694-831a-4944-a5a6-9a6255252c69"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_TemporalConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_TemporalConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd13b6174-ba48-41dd-a22d-3791f04a4101">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_Georeferenceable' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6d1e72d1-2928-4dc1-b99a-00b80bff4e0d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'cellGeometry' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>area</li><li>point</li></ul>]]></description>
                  <parent ref="EIDd13b6174-ba48-41dd-a22d-3791f04a4101"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('area', 'point')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_Georeferenceable' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='cellGeometry' and namespace-uri()='http://www.isotc211.org/2005/gmd']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'cellGeometry', 'localName': 'MD_Georeferenceable', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1debf3d0-7880-47d9-8761-077a8db60e2b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DomainConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8b3ee0a1-ba16-4913-9913-ef968c64bc02">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID1debf3d0-7880-47d9-8761-077a8db60e2b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_DomainConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4615d88a-a0cf-42ce-82e1-59c5f8e1bcf8">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DomainConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID06673bb1-5327-489f-af02-f9dec04e088b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID4615d88a-a0cf-42ce-82e1-59c5f8e1bcf8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_DomainConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3e4d9b6e-1c65-4eb3-9b98-c62ab4896052">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DomainConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID50d5b471-f2dc-4663-a202-8bdf251e20c8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID3e4d9b6e-1c65-4eb3-9b98-c62ab4896052"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_DomainConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc411d9a2-b687-484c-a797-683cc869e8f1">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DomainConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID591e3e1e-98c8-4997-b79c-68444456422d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDc411d9a2-b687-484c-a797-683cc869e8f1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_DomainConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_DomainConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDbe5138b3-7f6b-4d8e-9601-e6d3871a3a02">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_BrowseGraphic' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDaf668fc7-ab73-4db2-be2f-fa6d73aaa8ff">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDbe5138b3-7f6b-4d8e-9601-e6d3871a3a02"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_BrowseGraphic' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='fileDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_BrowseGraphic', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdccf8842-0d13-4481-9619-db93c4951269">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_BrowseGraphic' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd3c7592f-827b-4159-9935-a5d290723ce6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'fileType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDdccf8842-0d13-4481-9619-db93c4951269"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_BrowseGraphic' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='fileType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_BrowseGraphic', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7579d28b-a61a-4e2a-9e0a-079861e8b302">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_Scope' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID43b83abe-076f-449d-b03f-478be77ccbd2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'DQ_Scope' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID7579d28b-a61a-4e2a-9e0a-079861e8b302"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='DQ_Scope' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'DQ_Scope', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb1913779-de39-4c0c-acbe-cb11dcad7fd0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_Scope' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID59658ba8-f072-46ef-a297-6dd71c6d77ea">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'level' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>software</li><li>nonGeographicDataset</li><li>collectionHardware</li><li>fieldSession</li><li>feature</li><li>dimensionGroup</li><li>collectionSession</li><li>attributeType</li><li>series</li><li>service</li><li>propertyType</li><li>featureType</li><li>tile</li><li>model</li><li>attribute</li><li>dataset</li></ul>]]></description>
                  <parent ref="EIDb1913779-de39-4c0c-acbe-cb11dcad7fd0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('software', 'nonGeographicDataset', 'collectionHardware', 'fieldSession', 'feature', 'dimensionGroup', 'collectionSession', 'attributeType', 'series', 'service', 'propertyType', 'featureType', 'tile', 'model', 'attribute', 'dataset')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_Scope' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='level' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'level', 'localName': 'DQ_Scope', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd4b4a10e-ad19-43bb-a4fa-0fa742bcd41e">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID60f252f0-4aa4-4f8f-9c0c-69cab32bdba1">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'lineage' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDd4b4a10e-ad19-43bb-a4fa-0fa742bcd41e"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_DataQuality', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID904c675a-6578-4b3e-bbb3-e74473c53211">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID79d61495-202c-48fb-9cbc-d17abc966179">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'lineage' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID904c675a-6578-4b3e-bbb3-e74473c53211"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='lineage' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'lineage', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDabd36aa8-78d0-4a89-96e4-71177c14e996">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1805a2b0-f530-4361-a3f8-4c2552366ba7">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'DQ_DataQuality' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDabd36aa8-78d0-4a89-96e4-71177c14e996"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='DQ_DataQuality' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'DQ_DataQuality', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDf2bd5590-9b6d-4fc1-8889-30f3848d3add">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ConceptualConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1ff8edc2-cd08-4d4e-acfa-7d692a20f244">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDf2bd5590-9b6d-4fc1-8889-30f3848d3add"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ConceptualConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb33be6d0-9b35-4e3b-a418-78d1309f8d44">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ConceptualConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDca93a074-355c-4752-97c2-0cb6e312df72">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDb33be6d0-9b35-4e3b-a418-78d1309f8d44"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_ConceptualConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4aaaf0df-84b2-4403-b135-ea030002642c">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ConceptualConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1940280f-e027-487e-ac18-46206a685c16">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID4aaaf0df-84b2-4403-b135-ea030002642c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ConceptualConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1bb63bff-7ba9-466d-8c9a-f524e59d7a70">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_ConceptualConsistency' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID043bc547-7c2b-41eb-81db-9ff547d42854">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID1bb63bff-7ba9-466d-8c9a-f524e59d7a70"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_ConceptualConsistency' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_ConceptualConsistency', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID20059921-03b0-4da8-a6a5-992800aa5405">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'AbstractDQ_Element' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe37a8012-45a7-4e3b-814e-4d147594ed75">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID20059921-03b0-4da8-a6a5-992800aa5405"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='AbstractDQ_Element' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'AbstractDQ_Element', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID684c34f7-d25e-452b-8efd-0d55d769868a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc7485a28-dbf0-41fc-9f4d-0776b0cf3484">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'spatialRepresentationType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>tin</li><li>stereoModel</li><li>video</li><li>vector</li><li>textTable</li><li>grid</li></ul>]]></description>
                  <parent ref="EID684c34f7-d25e-452b-8efd-0d55d769868a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('tin', 'stereoModel', 'video', 'vector', 'textTable', 'grid')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='spatialRepresentationType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'spatialRepresentationType', 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDfc9d2c8d-012d-4917-a810-f411190273aa">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID01e3ee76-a2f3-4163-98bc-0df4926b668a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'characterSet' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>8859part3</li><li>ucs2</li><li>8859part6</li><li>8859part4</li><li>eucKR</li><li>8859part1</li><li>ebcdic</li><li>usAscii</li><li>8859part15</li><li>8859part10</li><li>eucJP</li><li>8859part11</li><li>shiftJIS</li><li>GB2312</li><li>8859part16</li><li>utf16</li><li>8859part7</li><li>ucs4</li><li>8859part2</li><li>8859part9</li><li>8859part5</li><li>8859part8</li><li>8859part14</li><li>big5</li><li>utf7</li><li>utf8</li><li>jis</li><li>8859part13</li></ul>]]></description>
                  <parent ref="EIDfc9d2c8d-012d-4917-a810-f411190273aa"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('8859part3', 'ucs2', '8859part6', '8859part4', 'eucKR', '8859part1', 'ebcdic', 'usAscii', '8859part15', '8859part10', 'eucJP', '8859part11', 'shiftJIS', 'GB2312', '8859part16', 'utf16', '8859part7', 'ucs4', '8859part2', '8859part9', '8859part5', '8859part8', '8859part14', 'big5', 'utf7', 'utf8', 'jis', '8859part13')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='characterSet' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'characterSet', 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd0d1b14b-76e0-44f3-82b5-6d0134748411">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcfec5896-59f1-463b-9619-ffbc3cdf32b2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EIDd0d1b14b-76e0-44f3-82b5-6d0134748411"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb0d2956a-0f91-4f57-88a7-1271833e8c34">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID207527ae-000a-407e-9049-8963eb050457">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'credit' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDb0d2956a-0f91-4f57-88a7-1271833e8c34"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='credit' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9f93434b-df12-4b38-a4a0-bd695bae3ed6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDeda11b23-88a1-4a1e-95ea-b3d124070f13">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'pointOfContact' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID9f93434b-df12-4b38-a4a0-bd695bae3ed6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='pointOfContact' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID033bb58f-5908-4c82-b75f-d52c7e48c231">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID51794886-7f7a-4c75-9f55-526fa9d7ac3d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'pointOfContact' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID033bb58f-5908-4c82-b75f-d52c7e48c231"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='pointOfContact' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'pointOfContact', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID730cf02d-fe48-41f4-8ad9-6b9511835ff3">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDaeab3a5b-87cd-4459-8135-ede9251d2838">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'resourceFormat' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID730cf02d-fe48-41f4-8ad9-6b9511835ff3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='resourceFormat' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID762b6b86-4cc4-482a-9e02-7f3454c9dde4">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5d44a02a-82b2-4edc-adb6-5b009f27f9b8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptiveKeywords' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EID762b6b86-4cc4-482a-9e02-7f3454c9dde4"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID863e2e7d-ccb1-4a06-b280-f760c6ed7da9">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8b63d8ed-c71c-4957-9ad2-53969bd8226d">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'descriptiveKeywords' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID863e2e7d-ccb1-4a06-b280-f760c6ed7da9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='descriptiveKeywords' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'descriptiveKeywords', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb9cbc81d-77a7-4ba0-b9d8-f1a972d94556">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9ad666e7-2602-44ac-b1c7-d291893e0f55">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'resourceConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDb9cbc81d-77a7-4ba0-b9d8-f1a972d94556"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='resourceConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDd9e47265-0b91-4304-af8a-6cd061661eba">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf78bc2f9-94a8-466c-b036-766c02e20fe3">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topicCategory' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDd9e47265-0b91-4304-af8a-6cd061661eba"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='topicCategory' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID919984b1-8056-495c-80f8-55ace11d601d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID6c5f64b6-48db-43e7-942c-ccd1907d6f90">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'topicCategory' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID919984b1-8056-495c-80f8-55ace11d601d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='topicCategory' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'topicCategory', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDea7d0132-5ca8-4a56-9226-14f06fbc317a">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa3305a2f-33dc-464f-91ae-86f8e08240d6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extent' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDea7d0132-5ca8-4a56-9226-14f06fbc317a"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_DataIdentification', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID138ea41e-92fc-4366-9649-73a841b133f7">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_DataIdentification' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID968f6977-4abf-4d67-97c2-9e17c47c5862">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'extent' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID138ea41e-92fc-4366-9649-73a841b133f7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_DataIdentification' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='extent' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'extent', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4b5fd383-6cd5-429b-959e-3e9183174e96">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_NonQuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4f1c551d-7d14-43f7-b7a3-9104087c9f76">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID4b5fd383-6cd5-429b-959e-3e9183174e96"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_NonQuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID66353108-ebd1-49ca-9f5a-1a8ec9bfebd0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_NonQuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4bc426a4-a1d8-42b6-b5e6-6a3dcd2d4440">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID66353108-ebd1-49ca-9f5a-1a8ec9bfebd0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_NonQuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDdb1d235d-7f4b-45e2-a936-d7646b414941">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_NonQuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID396ea176-25f0-40be-ba98-201988d0ff95">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDdb1d235d-7f4b-45e2-a936-d7646b414941"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_NonQuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc6e9f234-a4cb-489c-8d22-52692f3f9921">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_NonQuantitativeAttributeAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID66d1e3e1-1020-404e-a84b-eff8cc16377b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDc6e9f234-a4cb-489c-8d22-52692f3f9921"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_NonQuantitativeAttributeAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_NonQuantitativeAttributeAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID24041dbd-6dbb-4002-a0c3-6ae7e53c8be5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_RelativeInternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID90cbe270-9089-4bee-a2dd-594506314f93">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID24041dbd-6dbb-4002-a0c3-6ae7e53c8be5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_RelativeInternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID2457a3a8-5f9e-4ec1-9aed-76375f034023">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_RelativeInternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe80af1fb-07df-407e-8174-f259ec769843">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EID2457a3a8-5f9e-4ec1-9aed-76375f034023"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_RelativeInternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID9ab89cbd-035c-4f9f-bdf1-f1469bb169bc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_RelativeInternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9bb8d495-0abd-4ad2-b6d8-b5f6e71efc99">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID9ab89cbd-035c-4f9f-bdf1-f1469bb169bc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_RelativeInternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa65ddeff-39c2-4182-81d6-f72501b396a0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_RelativeInternalPositionalAccuracy' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0f0effd4-18b6-47a3-9d48-c7f334fa9981">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDa65ddeff-39c2-4182-81d6-f72501b396a0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_RelativeInternalPositionalAccuracy' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_RelativeInternalPositionalAccuracy', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID097d0ce4-3b1a-409a-891e-6df3ac5f73a5">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessOmission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8e5b8217-28df-4916-94c9-f2f3f1ec98fa">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'measureDescription' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID097d0ce4-3b1a-409a-891e-6df3ac5f73a5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='measureDescription' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessOmission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDef3bd990-a166-4964-a8ca-8a47c69f0d7d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessOmission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDf327eccd-6250-4d77-af33-433ac250b6b2">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>indirect</li><li>directExternal</li><li>directInternal</li></ul>]]></description>
                  <parent ref="EIDef3bd990-a166-4964-a8ca-8a47c69f0d7d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('indirect', 'directExternal', 'directInternal')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'evaluationMethodType', 'localName': 'DQ_CompletenessOmission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID30f7c4d9-fc7c-4999-b6a7-a548260fa6d1">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessOmission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID0f92ed71-67ee-47c9-8a36-479bed0f6a37">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationMethodType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID30f7c4d9-fc7c-4999-b6a7-a548260fa6d1"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationMethodType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessOmission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDa68d0d1e-60be-47d9-8d8c-13549cad7a37">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_CompletenessOmission' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID7408032c-2de7-4edb-9ce0-60e1e217694e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'evaluationProcedure' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EIDa68d0d1e-60be-47d9-8d8c-13549cad7a37"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_CompletenessOmission' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='evaluationProcedure' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_CompletenessOmission', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID5c7e1579-8d1a-4c57-a666-8418309735d3">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeResult' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID40e9e353-e70a-4da0-815a-387b1d7a1e0a">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'valueType' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID5c7e1579-8d1a-4c57-a666-8418309735d3"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='valueType' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_QuantitativeResult', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID65b76a4a-a159-4871-b922-7ea241cddfe0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'DQ_QuantitativeResult' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc051b0bf-e94f-4c31-8421-d622bc5be735">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'errorStatistic' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 0 and a maximum cardinality of 0]]></description>
                  <parent ref="EID65b76a4a-a159-4871-b922-7ea241cddfe0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='DQ_QuantitativeResult' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='errorStatistic' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 0) or ($propertyCount gt 0)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'DQ_QuantitativeResult', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID4f587fea-868f-4637-974d-7de775f24ac6">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'SV_PortSpecification' and namespace 'http://www.isotc211.org/2005/srv']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID96d65dd9-0f89-4f5c-8ed5-d83614f5f741">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'binding' and namespace 'http://www.isotc211.org/2005/srv' should have a value that corresponds to one from the following list: <br><ul><li>CORBA</li><li>COM</li><li>JAVA</li><li>WebServices</li><li>XML</li><li>SQL</li></ul>]]></description>
                  <parent ref="EID4f587fea-868f-4637-974d-7de775f24ac6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('CORBA', 'COM', 'JAVA', 'WebServices', 'XML', 'SQL')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='SV_PortSpecification' and namespace-uri()='http://www.isotc211.org/2005/srv']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='binding' and namespace-uri()='http://www.isotc211.org/2005/srv']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'binding', 'localName': 'SV_PortSpecification', 'namespace': 'http://www.isotc211.org/2005/srv', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb669042d-dd92-4aa3-aae7-5ad86f196af0">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_LegalConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5fe7dafa-52d9-4ef6-b377-d211e21e9010">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1]]></description>
                  <parent ref="EIDb669042d-dd92-4aa3-aae7-5ad86f196af0"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDaaf03b78-3e97-427e-9bc6-d334b3c6657b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_LegalConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc07067d7-a7f9-4b8a-a7c2-d0eee583f02b">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useLimitation' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDaaf03b78-3e97-427e-9bc6-d334b3c6657b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='useLimitation' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'useLimitation', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID7840f7a8-09ca-4047-a53e-6f588a8acd7b">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_LegalConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID4fc007c4-79d7-4e11-982d-66d69831aa17">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'accessConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>intellectualPropertyRights</li><li>license</li><li>otherRestrictions</li><li>copyright</li><li>patent</li><li>restricted</li><li>patentPending</li><li>trademark</li></ul>]]></description>
                  <parent ref="EID7840f7a8-09ca-4047-a53e-6f588a8acd7b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('intellectualPropertyRights', 'license', 'otherRestrictions', 'copyright', 'patent', 'restricted', 'patentPending', 'trademark')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='accessConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'accessConstraints', 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID1a0d01d6-2cce-49d7-86b2-4f781512a49d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'MD_LegalConstraints' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDfcac6f71-a0f3-4a3d-a9cc-dea907203faf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'useConstraints' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>intellectualPropertyRights</li><li>license</li><li>otherRestrictions</li><li>copyright</li><li>patent</li><li>restricted</li><li>patentPending</li><li>trademark</li></ul>]]></description>
                  <parent ref="EID1a0d01d6-2cce-49d7-86b2-4f781512a49d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('intellectualPropertyRights', 'license', 'otherRestrictions', 'copyright', 'patent', 'restricted', 'patentPending', 'trademark')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='MD_LegalConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='useConstraints' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'useConstraints', 'localName': 'MD_LegalConstraints', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID823848e2-e6ee-4be6-9be8-b882404f2f93">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID9ee8b850-71ed-47eb-a9f4-7f3071b53225">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'organisationName' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID823848e2-e6ee-4be6-9be8-b882404f2f93"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='organisationName' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDb944386f-fd96-4c18-b42d-8faa85efef26">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDaa44d802-c0f5-405d-8038-4a9ef96eb4a6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'organisationName' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDb944386f-fd96-4c18-b42d-8faa85efef26"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='organisationName' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'organisationName', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID33e442ed-d29b-4b1f-a51e-0c184b012e18">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID167f4e6b-50af-4390-ad4f-08250f15c062">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contactInfo' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EID33e442ed-d29b-4b1f-a51e-0c184b012e18"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='contactInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID60ee82bb-e98f-4baa-a9b1-0da04de6564f">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDb5eb9799-a92a-4cc2-8c64-deae41405a13">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'contactInfo' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EID60ee82bb-e98f-4baa-a9b1-0da04de6564f"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='contactInfo' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'contactInfo', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3ef776cc-b547-4572-81ea-a324559380db">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd497547e-31dc-4362-928c-718bbd92e3e9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'role' and namespace 'http://www.isotc211.org/2005/gmd' should have a value that corresponds to one from the following list: <br><ul><li>owner</li><li>custodian</li><li>author</li><li>publisher</li><li>originator</li><li>resourceProvider</li><li>processor</li><li>user</li><li>distributor</li><li>pointOfContact</li><li>principalInvestigator</li></ul>]]></description>
                  <parent ref="EID3ef776cc-b547-4572-81ea-a324559380db"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('owner', 'custodian', 'author', 'publisher', 'originator', 'resourceProvider', 'processor', 'user', 'distributor', 'pointOfContact', 'principalInvestigator')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='role' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*/data(@codeListValue)
       return
         if ($propertyFound and not($propertyFound = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'role', 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd', 'valueFound': $propertyFound, 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID3c331c75-0e4b-4bac-9294-c295e18efb35">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDeb815c3d-b707-4749-9197-6a42a21343e0">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_ResponsibleParty' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID3c331c75-0e4b-4bac-9294-c295e18efb35"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='CI_ResponsibleParty' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_ResponsibleParty', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDfb46feb5-60a4-41a0-b340-ed3a7c71611d">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID5365c58f-e748-46cd-922f-e919439997cf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'address' and namespace 'http://www.isotc211.org/2005/gmd' should have a minimum cardinality of 1 and a maximum cardinality of 1]]></description>
                  <parent ref="EIDfb46feb5-60a4-41a0-b340-ed3a7c71611d"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='address' and namespace-uri()='http://www.isotc211.org/2005/gmd']) 
       return
       if (($propertyCount lt 1) or ($propertyCount gt 1)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'CI_Contact', 'namespace': 'http://www.isotc211.org/2005/gmd', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EIDc15820ef-d8b7-4246-a041-0e964c4b68dc">
              <label>label</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc3af402c-8c41-4ef6-af65-f884875521ec">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'address' and namespace 'http://www.isotc211.org/2005/gmd' should not be empty if it's present]]></description>
                  <parent ref="EIDc15820ef-d8b7-4246-a041-0e964c4b68dc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd']/*[local-name()='address' and namespace-uri()='http://www.isotc211.org/2005/gmd']
     for $propertyFound in $propertiesFound 
     return
       if ($propertyFound[(count(*)=0 and not(text())) or (count(child::*)=1 and ((child::*[data(@codeList) and not(data(@codeListValue))]) or (child::*[local-name()='CharacterString' and namespace-uri()='http://www.isotc211.org/2005/gco' and not(text())])))]) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'address', 'namespace': 'http://www.isotc211.org/2005/gmd' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID832277e9-f329-44b5-b3c7-5e25a2628b87">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd28dd099-24e8-4c4f-af94-fe8ef9b91147">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'CI_Contact' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID832277e9-f329-44b5-b3c7-5e25a2628b87"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='CI_Contact' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'CI_Contact', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
            <TestStep id="EID11405082-4489-4a71-88fe-40057d3555f5">
              <label>Mandatory type test</label>
              <description><![CDATA[Constraints TestCase for Feature Type with name 'EX_GeographicBoundingBox' and namespace 'http://www.isotc211.org/2005/gmd']]></description>
              <parent ref="EID664605df-4305-42ec-96a9-f1534ad029b5"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDcf117718-70f0-46a6-9d05-253b426c14a8">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'EX_GeographicBoundingBox' and namespace 'http://www.isotc211.org/2005/gmd' should be present in the file]]></description>
                  <parent ref="EID11405082-4489-4a71-88fe-40057d3555f5"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='EX_GeographicBoundingBox' and namespace-uri()='http://www.isotc211.org/2005/gmd'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'EX_GeographicBoundingBox', 'namespace': 'http://www.isotc211.org/2005/gmd' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
