<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID79ce6d77-0426-4acf-acaa-8e5867791770" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>Test three types prof</label>
  <description><![CDATA[three types Description]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>Joltseductress</author>
  <creationDate>2018-08-27T09:52:35.273Z</creationDate>
  <lastEditor>Joltseductress</lastEditor>
  <lastUpdateDate>2018-08-27T09:52:35.273Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EIDfe13994b-e1f3-4174-ae07-3c944c167c84">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EID79ce6d77-0426-4acf-acaa-8e5867791770"/>
      <testCases>
        <TestCase id="EID0f432dc5-bc99-41d5-bb98-aac54fee8a25">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type1' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EID0530c2ee-7fc7-43c2-8eb4-cb3818c38701">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID0f432dc5-bc99-41d5-bb98-aac54fee8a25"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDa24240a2-3c5e-434a-bfbd-ba01ec3ec898">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type1Int' and namespace 'www.threetypes.com' should have a value that corresponds to one from the following list: <br><ul><li>1</li><li>3</li><li>5</li></ul>]]></description>
                  <parent ref="EID0530c2ee-7fc7-43c2-8eb4-cb3818c38701"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('1', '3', '5')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'type1Int', 'localName': 'type1', 'namespace': 'www.threetypes.com', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDdf639817-4248-4d61-8114-e34aead7a191">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EID60cba598-803b-4de5-bd85-5f924e055cc9">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDdf639817-4248-4d61-8114-e34aead7a191"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID05784184-50bc-45c1-87a7-426ae8c10930">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'type3' and namespace 'www.threetypes.com' should be present in the file]]></description>
                  <parent ref="EID60cba598-803b-4de5-bd85-5f924e055cc9"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'type3', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDda5ec370-f9be-4596-af06-79e1e04481e6">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EID74a055b7-045b-4366-a1fa-6e592746cf25">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDda5ec370-f9be-4596-af06-79e1e04481e6"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID30c18a91-ce12-4a63-90b0-7c543ca674c0">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type3String' and namespace 'www.threetypes.com' should not be empty if it's present]]></description>
                  <parent ref="EID74a055b7-045b-4366-a1fa-6e592746cf25"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com']
     for $propertyFound in $propertiesFound 
     return
       if (functx:all-whitespace($propertyFound)) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID9ec9adef-6616-4d5f-8fb4-2ececb0efed2">
          <label>type2 label</label>
          <description><![CDATA[type2 description]]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EID63d4b60e-c37a-4c6b-9c76-f607ccc83e24">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID9ec9adef-6616-4d5f-8fb4-2ececb0efed2"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID57bcdc6d-5ec5-48f6-b30f-c28a7048c3ba">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type2Double' and namespace 'www.threetypes.com' should have a minimum cardinality of 2 and a maximum cardinality of 4]]></description>
                  <parent ref="EID63d4b60e-c37a-4c6b-9c76-f607ccc83e24"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type2' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='type2Double' and namespace-uri()='www.threetypes.com']) 
       return
       if (($propertyCount lt 2) or ($propertyCount gt 4)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'type2', 'namespace': 'www.threetypes.com', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID636d3ecb-66bd-4d70-905f-ad18943d78ea">
          <label>MyCondition</label>
          <description><![CDATA[MyDescription]]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EIDa363608e-7055-4c08-85fb-27b1a1e5a776">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID636d3ecb-66bd-4d70-905f-ad18943d78ea"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc62c714e-5c5e-4b65-b7cb-fc2d79c82d26">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: MyCondition
<br />Description: MyDescription
<br />Subconditions: 
<br />- IF type1.type1Int IS 'int'
<br /> THEN type1.type1String IS 'string'
<br />]]></description>
                  <parent ref="EIDa363608e-7055-4c08-85fb-27b1a1e5a776"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com' and text()='int'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com' and text()='string'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com', 'expectedValue': 'string' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID08c423f8-b97b-495e-a71c-daaad23d3808">
          <label>asdas</label>
          <description><![CDATA[asdas]]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EIDa6391769-54dd-41d1-94d7-846ddc5986e7">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID08c423f8-b97b-495e-a71c-daaad23d3808"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDc11eb380-fa7d-4d8b-b989-9e298ebf058e">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: asdas
<br />Description: asdas
<br />Subconditions: 
<br />- IF type3.type3String EXISTS
<br /> THEN type3.type3Int EXISTS
<br />]]></description>
                  <parent ref="EIDa6391769-54dd-41d1-94d7-846ddc5986e7"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3Int' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type3Int', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDa2b53216-5232-4ee3-a2cd-3669f9f39e9a">
          <label>xor</label>
          <description><![CDATA[xordesc]]></description>
          <parent ref="EIDfe13994b-e1f3-4174-ae07-3c944c167c84"/>
          <testSteps>
            <TestStep id="EIDa6eb5468-42a6-4fe2-a9c4-0e7aa6735a68">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDa2b53216-5232-4ee3-a2cd-3669f9f39e9a"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID1e2e946a-ddc6-4b59-9822-64db64348f66">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: xor
<br />Description: xordesc
<br />Operator: XOR
<br />Subconditions: 
<br />- IF type1.type1Int EXISTS
<br /> THEN type1.type1String EXISTS
<br />- IF type3.type3Int IS 'int'
<br /> THEN type3.type3String IS 'string'
<br />]]></description>
                  <parent ref="EIDa6eb5468-42a6-4fe2-a9c4-0e7aa6735a68"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
let $messages1 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3Int' and namespace-uri()='www.threetypes.com' and text()='int'])
     let $thenPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com' and text()='string'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com', 'expectedValue': 'string' })
     else ()
    )[position() le $limitErrors]
 let $totalNumberErrors := count(($messages0, $messages1))
 let $messages := 
  if($totalNumberErrors eq 1) then ()
  else if ($totalNumberErrors eq 0) then
    local:addMessage('TR.xorAllConditionsMatched')

  else ($messages0, $messages1)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
