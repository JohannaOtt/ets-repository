<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID4bfe6a98-cc13-4998-ad6a-ef4d3d8a64e6" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>Test three types prof</label>
  <description><![CDATA[three types Description]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>Joltseductress</author>
  <creationDate>2018-08-27T09:52:35.273Z</creationDate>
  <lastEditor>Joltseductress</lastEditor>
  <lastUpdateDate>2018-08-27T09:52:35.273Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EID103d3fcf-689f-4396-9d27-9337b0f0f852">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EID4bfe6a98-cc13-4998-ad6a-ef4d3d8a64e6"/>
      <testCases>
        <TestCase id="EID37b34777-3403-48a0-a0d3-c8243c47f883">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type1' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EID95468b79-2f1f-45ba-bc8a-05e0efb40ef8">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID37b34777-3403-48a0-a0d3-c8243c47f883"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDff1ccd7c-d9c3-4970-ae5f-8c7d85f099d5">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type1Int' and namespace 'www.threetypes.com' should have a value that corresponds to one from the following list: <br><ul><li>1</li><li>3</li><li>5</li></ul>]]></description>
                  <parent ref="EID95468b79-2f1f-45ba-bc8a-05e0efb40ef8"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('1', '3', '5')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'type1Int', 'localName': 'type1', 'namespace': 'www.threetypes.com', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDb6efa5ff-09ff-4911-a652-d31bea581e6b">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EID8589f62b-b743-4874-8bb1-d4b82e6aae83">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDb6efa5ff-09ff-4911-a652-d31bea581e6b"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDe3eed0ff-b5d0-4dc6-b0e9-a456fa4d82de">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'type3' and namespace 'www.threetypes.com' should be present in the file]]></description>
                  <parent ref="EID8589f62b-b743-4874-8bb1-d4b82e6aae83"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'type3', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDe90d370d-9cce-4499-b30a-494e52002fc3">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EID8573605d-d470-4b0e-8f35-3399d3bfaa68">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDe90d370d-9cce-4499-b30a-494e52002fc3"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID80e08823-b4dc-46ab-b26c-e36ab62903a6">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type3String' and namespace 'www.threetypes.com' should not be empty if it's present]]></description>
                  <parent ref="EID8573605d-d470-4b0e-8f35-3399d3bfaa68"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com']
     for $propertyFound in $propertiesFound 
     return
       if (functx:all-whitespace($propertyFound)) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID822bfc4b-0a8e-429f-8daa-f677d66f472d">
          <label>type2 label</label>
          <description><![CDATA[type2 description]]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EIDeb8e76fe-8902-47f4-9c6e-beda68c91b96">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID822bfc4b-0a8e-429f-8daa-f677d66f472d"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID8c70023f-c95e-41de-8e20-cc2423a5644e">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type2Double' and namespace 'www.threetypes.com' should have a minimum cardinality of 2 and a maximum cardinality of 4]]></description>
                  <parent ref="EIDeb8e76fe-8902-47f4-9c6e-beda68c91b96"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type2' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='type2Double' and namespace-uri()='www.threetypes.com']) 
       return
       if (($propertyCount lt 2) or ($propertyCount gt 4)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'type2', 'namespace': 'www.threetypes.com', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID3c749b63-80c5-405e-8086-f36b8497ce38">
          <label>MyCondition</label>
          <description><![CDATA[MyDescription]]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EIDfcfa98b8-ed77-4bfa-bb74-b50f0031542c">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID3c749b63-80c5-405e-8086-f36b8497ce38"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID13310046-5eab-49dc-aee3-b20253a00e1e">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: MyCondition
<br />Description: MyDescription
<br />Subconditions: 
<br />- IF type1.type1Int IS 'int'
<br /> THEN type1.type1String IS 'string'
<br />]]></description>
                  <parent ref="EIDfcfa98b8-ed77-4bfa-bb74-b50f0031542c"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com' and text()='int'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com' and text()='string'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotMatchingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com', 'expectedValue': 'string' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID3c5e5490-dbc2-460e-9fba-0cdb255a7ccd">
          <label>asdas</label>
          <description><![CDATA[asdas]]></description>
          <parent ref="EID103d3fcf-689f-4396-9d27-9337b0f0f852"/>
          <testSteps>
            <TestStep id="EID93212715-7d5c-4216-b654-abc52d96fd59">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID3c5e5490-dbc2-460e-9fba-0cdb255a7ccd"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDab0da010-2e4f-47dd-9b25-3afbbbd08b05">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: asdas
<br />Description: asdas
<br />Subconditions: 
<br />- IF type3.type3String EXISTS
<br /> THEN type3.type3Int EXISTS
<br />]]></description>
                  <parent ref="EID93212715-7d5c-4216-b654-abc52d96fd59"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3Int' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type3Int', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
