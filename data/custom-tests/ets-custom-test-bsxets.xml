<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EID0d18a99f-3d31-47a7-a133-2110b5cc609b" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
  <itemHash>bQ==</itemHash>
  <remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
  <localPath>/auto</localPath>
  <label>Test three types prof</label>
  <description><![CDATA[three types Description]]></description>
  <reference>../../inspire-md-bsxets.xq</reference>
  <version>1.0.0</version>
  <author>Joltseductress</author>
  <creationDate>2018-08-27T09:52:35.273Z</creationDate>
  <lastEditor>Joltseductress</lastEditor>
  <lastUpdateDate>2018-08-27T09:52:35.273Z</lastUpdateDate>
  <tags>
    <tag ref="EIDfe1f3796-0ebf-4960-a6f7-f935e087fa4c"/>
  </tags>
  <testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
  <translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
  <ParameterList name="ETF Standard Parameters for XML test objects">
    <parameter name="files_to_test" required="true">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
    <parameter name="tests_to_execute" required="false">
      <defaultValue>.*</defaultValue>
      <allowedValues>.*</allowedValues>
      <type>string</type>
    </parameter>
  </ParameterList>
  <supportedTestObjectTypes>
    <testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
  </supportedTestObjectTypes>
  <testModules>
    <TestModule id="EID641b59c7-0571-4dc0-b047-b12fc85360ac">
      <label>Default test module</label>
      <description><![CDATA[This is the default test module]]></description>
      <parent ref="EID0d18a99f-3d31-47a7-a133-2110b5cc609b"/>
      <testCases>
        <TestCase id="EID0d144bd9-c5bc-4c1a-8bdf-2168d43e7a8c">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type1' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID641b59c7-0571-4dc0-b047-b12fc85360ac"/>
          <testSteps>
            <TestStep id="EID1fe4913f-8dd8-49ad-b8a1-e9d8a3f4fae6">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID0d144bd9-c5bc-4c1a-8bdf-2168d43e7a8c"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID77fce7f8-5486-4c58-864e-a9c73d5d5549">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type1Int' and namespace 'www.threetypes.com' should have a value that corresponds to one from the following list: <br><ul><li>1</li><li>3</li><li>5</li></ul>]]></description>
                  <parent ref="EID1fe4913f-8dd8-49ad-b8a1-e9d8a3f4fae6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $codes := ('1', '3', '5')
let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound
       let $propertyFound := $typeFound/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com']
       return
         if ($propertyFound and not($propertyFound/text() = $codes)) then
           local:addMessage('TR.invalidPropertyValueError', map { 'propName': 'type1Int', 'localName': 'type1', 'namespace': 'www.threetypes.com', 'valueFound': $propertyFound/text(), 'allowedValues': string-join( $codes, ', ') })
 else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID81fc9e22-5731-4452-addf-4dcc8c47ce31">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID641b59c7-0571-4dc0-b047-b12fc85360ac"/>
          <testSteps>
            <TestStep id="EID7b20f916-e70c-49eb-9138-902db53db75b">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID81fc9e22-5731-4452-addf-4dcc8c47ce31"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID73b19171-9531-4cef-b54a-f3c4a97b595c">
                  <label>TestAssertion</label>
                  <description><![CDATA[The type with localName 'type3' and namespace 'www.threetypes.com' should be present in the file]]></description>
                  <parent ref="EID7b20f916-e70c-49eb-9138-902db53db75b"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
    (for $record in $db
     let $title := count($record//*[local-name()='type3' and namespace-uri()='www.threetypes.com'])
     return
     if (not($title)) then
      local:addMessage('TR.missingMandatoryTypeError', map { 'localName': 'type3', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDa7364b69-6784-4baa-ad42-6d812cdc38a2">
          <label>TestCase label</label>
          <description><![CDATA[Constraints TestCase for Feature Type with name 'type3' and namespace 'www.threetypes.com']]></description>
          <parent ref="EID641b59c7-0571-4dc0-b047-b12fc85360ac"/>
          <testSteps>
            <TestStep id="EID79b11f8c-6e18-4f3b-89f5-baba19c169fc">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDa7364b69-6784-4baa-ad42-6d812cdc38a2"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EIDd59b3a92-5454-4086-8d79-d079627ec1d9">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type3String' and namespace 'www.threetypes.com' should not be empty if it's present]]></description>
                  <parent ref="EID79b11f8c-6e18-4f3b-89f5-baba19c169fc"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $propertiesFound := $record//*[local-name()='type3' and namespace-uri()='www.threetypes.com']/*[local-name()='type3String' and namespace-uri()='www.threetypes.com']
     for $propertyFound in $propertiesFound 
     return
       if (functx:all-whitespace($propertyFound)) then
         local:addMessage('TR.missingTypeContentError', map { 'localName': 'type3String', 'namespace': 'www.threetypes.com' })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EIDf36c047f-aabf-44a7-b084-680198cb30a7">
          <label>type2 label</label>
          <description><![CDATA[type2 description]]></description>
          <parent ref="EID641b59c7-0571-4dc0-b047-b12fc85360ac"/>
          <testSteps>
            <TestStep id="EID1df065f8-9957-4e98-9b94-b8641098a2d6">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EIDf36c047f-aabf-44a7-b084-680198cb30a7"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID710144f8-5db4-4e48-a812-4715a63caadf">
                  <label>TestAssertion</label>
                  <description><![CDATA[The property with localName 'type2Double' and namespace 'www.threetypes.com' should have a minimum cardinality of 2 and a maximum cardinality of 4]]></description>
                  <parent ref="EID1df065f8-9957-4e98-9b94-b8641098a2d6"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>let $messages :=
  (for $record in $db
     let $typesFound := $record//*[local-name()='type2' and namespace-uri()='www.threetypes.com']
     for $typeFound in $typesFound 
       let $propertyCount := count($typeFound/*[local-name()='type2Double' and namespace-uri()='www.threetypes.com']) 
       return
       if (($propertyCount lt 2) or ($propertyCount gt 4)) then
        local:addMessage('TR.invalidPropertyCardinalityError', map { 'localName': 'type2', 'namespace': 'www.threetypes.com', 'invalidCardinality': $propertyCount })
       else ()
  )[position() le $limitErrors]
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingTypeContentError"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                    <translationTemplate ref="TR.invalidPropertyCardinalityError"/>
                    <translationTemplate ref="TR.invalidPropertyValueError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
        <TestCase id="EID46515fb0-8cb3-4ba0-b2b6-d325aebbb145">
          <label>MyCondition</label>
          <description><![CDATA[MyDescription]]></description>
          <parent ref="EID641b59c7-0571-4dc0-b047-b12fc85360ac"/>
          <testSteps>
            <TestStep id="EID3c8cb3be-e487-495d-bf33-7b141a39f714">
              <label>testStep</label>
              <description><![CDATA[This is a test step]]></description>
              <parent ref="EID46515fb0-8cb3-4ba0-b2b6-d325aebbb145"/>
              <statementForExecution>not applicable</statementForExecution>
              <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
              <testAssertions>
                <TestAssertion id="EID271936ff-f620-477c-9aad-d90e0042c651">
                  <label>TestAssertion</label>
                  <description><![CDATA[Test assertion for a condition with the following information:
<br />Name: MyCondition
<br />Description: MyDescription
<br />Subconditions: 
<br />- IF type1.type1Int EXISTS
<br /> THEN type1.type1String EXISTS
<br />]]></description>
                  <parent ref="EID3c8cb3be-e487-495d-bf33-7b141a39f714"/>
                  <expectedResult>NOT_APPLICABLE</expectedResult>
                  <expression>
let $messages0 :=
    (for $record in $db
     let $ifPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1Int' and namespace-uri()='www.threetypes.com'])
     let $thenPropertyCount := count($record//*[local-name()='type1' and namespace-uri()='www.threetypes.com']/*[local-name()='type1String' and namespace-uri()='www.threetypes.com'])
     return 
     if ($ifPropertyCount gt $thenPropertyCount) then 
       local:addMessage('TR.conditionNotExistingValue', map { 'localName': 'type1String', 'namespace': 'www.threetypes.com' })
     else ()
    )[position() le $limitErrors]
 let $messages := ($messages0)
return
(if ($messages) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
 $messages)</expression>
                  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
                  <translationTemplates>
                    <translationTemplate ref="TR.recordsWithErrors"/>
                    <translationTemplate ref="TR.missingMandatoryTypeError"/>
                  </translationTemplates>
                </TestAssertion>
              </testAssertions>
            </TestStep>
          </testSteps>
        </TestCase>
      </testCases>
    </TestModule>
  </testModules>
</ExecutableTestSuite>
